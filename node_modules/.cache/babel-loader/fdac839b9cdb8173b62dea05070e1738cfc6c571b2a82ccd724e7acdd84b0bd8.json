{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nfunction shuffle(arr) {\n  // 洗牌算法\n  let a = arr.slice();\n  for (let i = a.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n}\nexport default {\n  data() {\n    return {\n      userList: (() => {\n        // 10个玩家\n        const names = ['玩家一', '玩家二', '玩家三', '玩家四', '玩家五', '玩家六', '玩家七', '玩家八', '玩家九', '玩家十'];\n        // 先生成全部DPS\n        let allRoles = [];\n        let userList = names.map((name, idx) => {\n          let roles = [];\n          for (let i = 1; i <= 3; i++) {\n            roles.push({\n              roleName: `${name}角色${i}`,\n              xinfa: 'DPS'\n            });\n          }\n          allRoles = allRoles.concat(roles);\n          return {\n            userName: name,\n            roleList: roles\n          };\n        });\n        // 随机给1个角色设置T，3个角色设置奶\n        let allIdx = [];\n        userList.forEach((u, ui) => u.roleList.forEach((r, ri) => allIdx.push([ui, ri])));\n        // 随机T\n        let tIdx = allIdx.splice(Math.floor(Math.random() * allIdx.length), 1)[0];\n        userList[tIdx[0]].roleList[tIdx[1]].xinfa = 'T';\n        // 随机3个奶\n        for (let i = 0; i < 3; i++) {\n          let nIdx = allIdx.splice(Math.floor(Math.random() * allIdx.length), 1)[0];\n          userList[nIdx[0]].roleList[nIdx[1]].xinfa = '奶';\n        }\n        return userList;\n      })(),\n      dialogVisible: false,\n      userForm: {\n        userName: '',\n        roleList: []\n      },\n      editIndex: null,\n      selectedUserIndex: null,\n      availableRoles: [],\n      drawResults: [],\n      mustT: null,\n      mustNai: null,\n      isDrawing: false,\n      displayRoles: [],\n      drawTimer: null\n    };\n  },\n  watch: {\n    userList: {\n      handler() {\n        this.resetGacha();\n      },\n      deep: true\n    }\n  },\n  computed: {\n    visibleBalls() {\n      // 计算能显示下的最大数量，比如18个\n      const maxBalls = 18;\n      return this.displayRoles.slice(0, maxBalls);\n    }\n  },\n  methods: {\n    getTagType(xinfa) {\n      if (xinfa === 'T') return 'danger';\n      if (xinfa === '奶') return 'success';\n      return '';\n    },\n    getBallClass(xinfa) {\n      // 主题色区分\n      if (xinfa === 'T') return 'ball-t';\n      if (xinfa === '奶') return 'ball-nai';\n      return 'ball-dps';\n    },\n    xinfaFormatter(row) {\n      if (row.role.xinfa === 'T') return 'T';\n      if (row.role.xinfa === '奶') return '奶';\n      return 'DPS';\n    },\n    openDialog() {\n      this.editIndex = null;\n      this.userForm = {\n        userName: '',\n        roleList: []\n      };\n      this.dialogVisible = true;\n    },\n    editUser(index) {\n      this.editIndex = index;\n      this.userForm = JSON.parse(JSON.stringify(this.userList[index]));\n      this.dialogVisible = true;\n    },\n    removeUser(index) {\n      this.$confirm('确定删除该玩家及其角色？', '提示', {\n        type: 'warning'\n      }).then(() => {\n        this.userList.splice(index, 1);\n      });\n    },\n    addRole() {\n      if (this.userForm.roleList.length >= 3) return;\n      this.userForm.roleList.push({\n        roleName: '',\n        xinfa: 'DPS'\n      }); // 默认DPS\n    },\n    removeRole(idx) {\n      this.userForm.roleList.splice(idx, 1);\n    },\n    handleClose() {\n      this.dialogVisible = false;\n    },\n    onSave() {\n      if (!this.userForm.userName) {\n        this.$message.warning('请输入玩家名');\n        return;\n      }\n      if (this.userForm.roleList.length === 0) {\n        this.$message.warning('请至少添加一个角色');\n        return;\n      }\n      for (const role of this.userForm.roleList) {\n        if (!role.roleName || !role.xinfa) {\n          this.$message.warning('请完善角色信息');\n          return;\n        }\n      }\n      if (this.editIndex === null) {\n        this.userList.push(JSON.parse(JSON.stringify(this.userForm)));\n      } else {\n        this.$set(this.userList, this.editIndex, JSON.parse(JSON.stringify(this.userForm)));\n      }\n      this.dialogVisible = false;\n    },\n    resetGacha() {\n      this.availableRoles = [];\n      this.drawResults = [];\n      this.selectedUserIndex = null;\n      let allRoles = [];\n      this.userList.forEach((user, idx) => {\n        user.roleList.forEach(role => {\n          allRoles.push({\n            ...role,\n            ownerIndex: idx,\n            ownerName: user.userName\n          });\n        });\n      });\n      this.mustT = allRoles.find(r => r.xinfa === 'T');\n      this.mustNai = allRoles.find(r => r.xinfa === '奶');\n      this.availableRoles = allRoles;\n      this.displayRoles = allRoles.slice();\n    },\n    handleDraw() {\n      if (this.isDrawing || this.selectedUserIndex === null || this.availableRoles.length === 0) return;\n      this.isDrawing = true;\n      let pool = this.availableRoles.filter(r => r.ownerIndex !== this.selectedUserIndex);\n      let leftUsers = this.userList.length - this.drawResults.length;\n      let mustDraw = null;\n      if (this.mustT && !this.drawResults.some(r => r.role.xinfa === 'T')) {\n        let tLeft = this.availableRoles.filter(r => r.xinfa === 'T');\n        if (tLeft.length > 0 && leftUsers === tLeft.length) {\n          mustDraw = tLeft.find(r => r.ownerIndex !== this.selectedUserIndex);\n        }\n      }\n      if (!mustDraw && this.mustNai && !this.drawResults.some(r => r.role.xinfa === '奶')) {\n        let naiLeft = this.availableRoles.filter(r => r.xinfa === '奶');\n        if (naiLeft.length > 0 && leftUsers === naiLeft.length) {\n          mustDraw = naiLeft.find(r => r.ownerIndex !== this.selectedUserIndex);\n        }\n      }\n      let drawPool = pool;\n      if (mustDraw) {\n        drawPool = [mustDraw];\n      }\n      if (drawPool.length === 0) {\n        this.$message.warning('没有可抽取的角色');\n        this.isDrawing = false;\n        return;\n      }\n      // 动画洗牌\n      let shuffleTimes = 0;\n      let totalDuration = 3000;\n      let interval = 60;\n      let elapsed = 0;\n      let timer = null;\n      const shuffleStep = () => {\n        this.displayRoles = shuffle(this.availableRoles);\n        shuffleTimes++;\n        elapsed += interval;\n        // 速度逐渐变慢\n        if (elapsed < totalDuration) {\n          interval = Math.min(300, interval + 20);\n          timer = setTimeout(shuffleStep, interval);\n        } else {\n          // 停止动画，显示最终结果\n          // 随机选一个\n          const idx = Math.floor(Math.random() * drawPool.length);\n          const drawRole = drawPool[idx];\n          // 让抽中的球显示在第一个\n          let finalDisplay = this.availableRoles.slice();\n          finalDisplay = shuffle(finalDisplay);\n          // 保证抽中的球在第一个\n          finalDisplay = [drawRole].concat(finalDisplay.filter(r => !(r.roleName === drawRole.roleName && r.xinfa === drawRole.xinfa && r.ownerIndex === drawRole.ownerIndex)));\n          this.displayRoles = finalDisplay;\n          setTimeout(() => {\n            // 记录结果\n            const user = this.userList[this.selectedUserIndex];\n            this.drawResults.push({\n              userName: user.userName,\n              role: {\n                roleName: drawRole.roleName,\n                xinfa: drawRole.xinfa\n              }\n            });\n            // 从池中移除\n            this.availableRoles = this.availableRoles.filter(r => !(r.roleName === drawRole.roleName && r.xinfa === drawRole.xinfa && r.ownerIndex === drawRole.ownerIndex));\n            if (drawRole.xinfa === 'T') this.mustT = null;\n            if (drawRole.xinfa === '奶') this.mustNai = null;\n            // 更新展示\n            this.displayRoles = this.availableRoles.slice();\n            // 自动切换到下一个玩家\n            if (this.drawResults.length < this.userList.length) {\n              let next = (this.selectedUserIndex + 1) % this.userList.length;\n              while (this.drawResults.find(r => r.userName === this.userList[next].userName)) {\n                next = (next + 1) % this.userList.length;\n              }\n              this.selectedUserIndex = next;\n            } else {\n              this.selectedUserIndex = null;\n            }\n            this.isDrawing = false;\n          }, 600);\n        }\n      };\n      shuffleStep();\n    },\n    selectUser(idx) {\n      if (this.isDrawing) return;\n      const user = this.userList[idx];\n      if (this.drawResults.some(r => r.userName === user.userName)) return;\n      this.selectedUserIndex = idx;\n    },\n    getBallStyle(idx, total) {\n      // 设定球的半径和机体半径\n      const ballR = 22; // 球半径\n      const bodyR = 160; // 机体半径（320px/2）\n      // 计算每层最多能放多少球\n      const layers = [7, 6, 5]; // 每层球数（底->上）\n      let layer = 0,\n        posInLayer = idx;\n      let sum = 0;\n      for (let i = 0; i < layers.length; i++) {\n        if (posInLayer < layers[i]) {\n          layer = i;\n          break;\n        }\n        posInLayer -= layers[i];\n      }\n      // 层高\n      const layerHeight = 2 * ballR + 2;\n      const y = bodyR * 2 - (layer + 1) * layerHeight - 10; // 距顶部\n      // 每层球的最大宽度\n      const ballsInThisLayer = layers[layer];\n      const angleStep = Math.PI / (ballsInThisLayer + 1);\n      // 让球在底部左右分布，模拟堆叠\n      const angle = Math.PI - angleStep * (posInLayer + 1) + (Math.random() - 0.5) * 0.15;\n      const x = bodyR + Math.cos(angle) * (bodyR - ballR - 8);\n      // 保证球不会超出圆形\n      return {\n        position: 'absolute',\n        left: `${x - ballR}px`,\n        top: `${y}px`,\n        zIndex: layer,\n        transition: 'left 0.3s, top 0.3s'\n      };\n    }\n  },\n  mounted() {\n    this.resetGacha();\n  }\n};","map":{"version":3,"names":["shuffle","arr","a","slice","i","length","j","Math","floor","random","data","userList","names","allRoles","map","name","idx","roles","push","roleName","xinfa","concat","userName","roleList","allIdx","forEach","u","ui","r","ri","tIdx","splice","nIdx","dialogVisible","userForm","editIndex","selectedUserIndex","availableRoles","drawResults","mustT","mustNai","isDrawing","displayRoles","drawTimer","watch","handler","resetGacha","deep","computed","visibleBalls","maxBalls","methods","getTagType","getBallClass","xinfaFormatter","row","role","openDialog","editUser","index","JSON","parse","stringify","removeUser","$confirm","type","then","addRole","removeRole","handleClose","onSave","$message","warning","$set","user","ownerIndex","ownerName","find","handleDraw","pool","filter","leftUsers","mustDraw","some","tLeft","naiLeft","drawPool","shuffleTimes","totalDuration","interval","elapsed","timer","shuffleStep","min","setTimeout","drawRole","finalDisplay","next","selectUser","getBallStyle","total","ballR","bodyR","layers","layer","posInLayer","sum","layerHeight","y","ballsInThisLayer","angleStep","PI","angle","x","cos","position","left","top","zIndex","transition","mounted"],"sources":["src/modules/jx3/role-draw.vue"],"sourcesContent":["<template>\n    <div class=\"jx3-draw\">\n        <div class=\"left\">\n            <!-- ...左侧角色池部分保持不变... -->\n            <p class=\"title\">角色池</p>\n            <div class=\"user-list\" v-for=\"(user, index) in userList\" :key=\"user.userName + index\">\n                <div class=\"user-header\">\n                    <span class=\"user-avatar\">{{ user.userName.charAt(0).toUpperCase() }}</span>\n                    <span class=\"user-name\">{{ user.userName }}</span>\n                    <div class=\"user-actions\">\n                        <el-button size=\"mini\" @click=\"editUser(index)\">编辑</el-button>\n                        <el-button size=\"mini\" type=\"danger\" @click=\"removeUser(index)\">删除</el-button>\n                    </div>\n                </div>\n                <div class=\"role-list\">\n                    <el-tag v-for=\"(role, _index) in user.roleList\" :key=\"'role' + _index\" size=\"small\"\n                        :type=\"getTagType(role.xinfa)\" class=\"role-tag\">\n                        <span class=\"role-name\">{{ role.roleName }}</span>\n                        <span class=\"role-xinfa\">（{{ role.xinfa }}）</span>\n                    </el-tag>\n                </div>\n            </div>\n            <div class=\"add-btn\">\n                <el-button style=\"width: 200px;margin-left: 50px;\" size=\"mini\" @click=\"openDialog()\">添加玩家</el-button>\n            </div>\n        </div>\n        <!-- 右侧结构调整 -->\n        <div class=\"right\">\n            <div class=\"gacha-header\">扭蛋机抽签</div>\n            <div class=\"gacha-flex\">\n                <div class=\"gacha-machine-outer\">\n                    <div class=\"gacha-machine\">\n                        <div class=\"gacha-machine-top\"></div>\n                        <div class=\"gacha-machine-body\">\n                            <div class=\"gacha-balls\">\n                                <div\n                                    v-for=\"(role, idx) in visibleBalls\"\n                                    :key=\"role.roleName + role.xinfa + idx\"\n                                    class=\"gacha-ball\"\n                                    :class=\"getBallClass(role.xinfa)\"\n                                    :style=\"getBallStyle(idx, visibleBalls.length)\"\n                                >\n                                    <span class=\"ball-role-name\">{{ role.roleName }}</span>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"gacha-machine-hole\"></div>\n                        <!-- 扭蛋机把手 -->\n                        <div class=\"gacha-machine-handle\"\n                            :class=\"{ 'handle-disabled': isDrawing || selectedUserIndex === null || availableRoles.length === 0 }\"\n                            @click=\"handleDraw\">\n                            <div class=\"handle-inner\"></div>\n                        </div>\n                        <div class=\"gacha-machine-bottom\"></div>\n                    </div>\n                </div>\n                <div class=\"gacha-result-table\">\n                    <div class=\"user-select-container\">\n                        <div class=\"user-select-blocks\">\n                            <div v-for=\"(user, idx) in userList\" :key=\"user.userName + idx\" class=\"user-block role-tag\"\n                                :class=\"{\n                                    selected: selectedUserIndex === idx,\n                                    disabled: drawResults.some(r => r.userName === user.userName)\n                                }\" @click=\"selectUser(idx)\">\n                                <span class=\"user-block-name\">{{ user.userName }}</span>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"result-table-wrap\">\n                        <el-table v-if=\"drawResults.length\" :data=\"drawResults\" border class=\"theme-table\" size=\"mini\"\n                            :header-cell-style=\"{ background: '#e9faf5', color: '#2a87b3', fontWeight: 'bold', border: '1px solid #2a87b3' }\"\n                            :cell-style=\"{ border: '1px solid #2a87b3', color: '#2a87b3' }\" :row-style=\"{ background: '#fff' }\">\n                            <el-table-column prop=\"userName\" label=\"玩家\" />\n                            <el-table-column prop=\"role.roleName\" label=\"抽到角色\" />\n                            <el-table-column prop=\"role.xinfa\" label=\"心法\" :formatter=\"xinfaFormatter\" />\n                        </el-table>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <!-- 添加/编辑玩家弹窗 -->\n        <el-dialog :title=\"editIndex === null ? '添加玩家' : '编辑玩家'\" :visible.sync=\"dialogVisible\" width=\"400px\"\n            :before-close=\"handleClose\">\n            <el-form :model=\"userForm\" label-width=\"60px\">\n                <el-form-item label=\"玩家\">\n                    <el-input v-model=\"userForm.userName\" size=\"mini\"></el-input>\n                </el-form-item>\n                <el-form-item label=\"角色\">\n                    <div v-for=\"(role, idx) in userForm.roleList\" :key=\"'formrole' + idx\" class=\"role-form-row\">\n                        <el-input v-model=\"role.roleName\" size=\"mini\" placeholder=\"角色名\"\n                            style=\"width: 100px; margin-right: 8px;\" />\n                        <el-select v-model=\"role.xinfa\" size=\"mini\" placeholder=\"心法\" style=\"width: 70px;\">\n                            <el-option label=\"T\" value=\"T\"></el-option>\n                            <el-option label=\"奶\" value=\"奶\"></el-option>\n                            <el-option label=\"DPS\" value=\"DPS\"></el-option>\n                        </el-select>\n                        <el-button size=\"mini\" type=\"danger\" icon=\"el-icon-delete\" @click=\"removeRole(idx)\" />\n                    </div>\n                    <el-button v-if=\"userForm.roleList.length < 3\" class=\"button-new-tag\" size=\"mini\" @click=\"addRole\"\n                        style=\"margin-top: 8px;\">+ 添加角色</el-button>\n                </el-form-item>\n            </el-form>\n            <span slot=\"footer\" class=\"dialog-footer\">\n                <el-button @click=\"dialogVisible = false\" size=\"mini\">取消</el-button>\n                <el-button type=\"primary\" @click=\"onSave\" size=\"mini\">确定</el-button>\n            </span>\n        </el-dialog>\n    </div>\n</template>\n\n<script>\nfunction shuffle(arr) {\n    // 洗牌算法\n    let a = arr.slice();\n    for (let i = a.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n}\nexport default {\n    data() {\n        return {\n            userList: (() => {\n                // 10个玩家\n                const names = [\n                    '玩家一', '玩家二', '玩家三', '玩家四', '玩家五',\n                    '玩家六', '玩家七', '玩家八', '玩家九', '玩家十'\n                ];\n                // 先生成全部DPS\n                let allRoles = [];\n                let userList = names.map((name, idx) => {\n                    let roles = [];\n                    for (let i = 1; i <= 3; i++) {\n                        roles.push({ roleName: `${name}角色${i}`, xinfa: 'DPS' });\n                    }\n                    allRoles = allRoles.concat(roles);\n                    return { userName: name, roleList: roles };\n                });\n                // 随机给1个角色设置T，3个角色设置奶\n                let allIdx = [];\n                userList.forEach((u, ui) => u.roleList.forEach((r, ri) => allIdx.push([ui, ri])));\n                // 随机T\n                let tIdx = allIdx.splice(Math.floor(Math.random() * allIdx.length), 1)[0];\n                userList[tIdx[0]].roleList[tIdx[1]].xinfa = 'T';\n                // 随机3个奶\n                for (let i = 0; i < 3; i++) {\n                    let nIdx = allIdx.splice(Math.floor(Math.random() * allIdx.length), 1)[0];\n                    userList[nIdx[0]].roleList[nIdx[1]].xinfa = '奶';\n                }\n                return userList;\n            })(),\n            dialogVisible: false,\n            userForm: {\n                userName: '',\n                roleList: []\n            },\n            editIndex: null,\n            selectedUserIndex: null,\n            availableRoles: [],\n            drawResults: [],\n            mustT: null,\n            mustNai: null,\n            isDrawing: false,\n            displayRoles: [],\n            drawTimer: null,\n        }\n    },\n    watch: {\n        userList: {\n            handler() {\n                this.resetGacha()\n            },\n            deep: true\n        }\n    },\n    computed: {\n  visibleBalls() {\n    // 计算能显示下的最大数量，比如18个\n    const maxBalls = 18;\n    return this.displayRoles.slice(0, maxBalls);\n  }\n},\n    methods: {\n        getTagType(xinfa) {\n            if (xinfa === 'T') return 'danger'\n            if (xinfa === '奶') return 'success'\n            return ''\n        },\n        getBallClass(xinfa) {\n            // 主题色区分\n            if (xinfa === 'T') return 'ball-t'\n            if (xinfa === '奶') return 'ball-nai'\n            return 'ball-dps'\n        },\n        xinfaFormatter(row) {\n            if (row.role.xinfa === 'T') return 'T'\n            if (row.role.xinfa === '奶') return '奶'\n            return 'DPS'\n        },\n        openDialog() {\n            this.editIndex = null\n            this.userForm = { userName: '', roleList: [] }\n            this.dialogVisible = true\n        },\n        editUser(index) {\n            this.editIndex = index\n            this.userForm = JSON.parse(JSON.stringify(this.userList[index]))\n            this.dialogVisible = true\n        },\n        removeUser(index) {\n            this.$confirm('确定删除该玩家及其角色？', '提示', {\n                type: 'warning'\n            }).then(() => {\n                this.userList.splice(index, 1)\n            })\n        },\n        addRole() {\n            if (this.userForm.roleList.length >= 3) return\n            this.userForm.roleList.push({ roleName: '', xinfa: 'DPS' }) // 默认DPS\n        },\n        removeRole(idx) {\n            this.userForm.roleList.splice(idx, 1)\n        },\n        handleClose() {\n            this.dialogVisible = false\n        },\n        onSave() {\n            if (!this.userForm.userName) {\n                this.$message.warning('请输入玩家名')\n                return\n            }\n            if (this.userForm.roleList.length === 0) {\n                this.$message.warning('请至少添加一个角色')\n                return\n            }\n            for (const role of this.userForm.roleList) {\n                if (!role.roleName || !role.xinfa) {\n                    this.$message.warning('请完善角色信息')\n                    return\n                }\n            }\n            if (this.editIndex === null) {\n                this.userList.push(JSON.parse(JSON.stringify(this.userForm)))\n            } else {\n                this.$set(this.userList, this.editIndex, JSON.parse(JSON.stringify(this.userForm)))\n            }\n            this.dialogVisible = false\n        },\n        resetGacha() {\n            this.availableRoles = []\n            this.drawResults = []\n            this.selectedUserIndex = null\n            let allRoles = []\n            this.userList.forEach((user, idx) => {\n                user.roleList.forEach(role => {\n                    allRoles.push({\n                        ...role,\n                        ownerIndex: idx,\n                        ownerName: user.userName\n                    })\n                })\n            })\n            this.mustT = allRoles.find(r => r.xinfa === 'T')\n            this.mustNai = allRoles.find(r => r.xinfa === '奶')\n            this.availableRoles = allRoles\n            this.displayRoles = allRoles.slice()\n        },\n        handleDraw() {\n            if (\n                this.isDrawing ||\n                this.selectedUserIndex === null ||\n                this.availableRoles.length === 0\n            ) return\n            this.isDrawing = true\n            let pool = this.availableRoles.filter(r => r.ownerIndex !== this.selectedUserIndex)\n            let leftUsers = this.userList.length - this.drawResults.length\n            let mustDraw = null\n            if (this.mustT && !this.drawResults.some(r => r.role.xinfa === 'T')) {\n                let tLeft = this.availableRoles.filter(r => r.xinfa === 'T')\n                if (tLeft.length > 0 && leftUsers === tLeft.length) {\n                    mustDraw = tLeft.find(r => r.ownerIndex !== this.selectedUserIndex)\n                }\n            }\n            if (!mustDraw && this.mustNai && !this.drawResults.some(r => r.role.xinfa === '奶')) {\n                let naiLeft = this.availableRoles.filter(r => r.xinfa === '奶')\n                if (naiLeft.length > 0 && leftUsers === naiLeft.length) {\n                    mustDraw = naiLeft.find(r => r.ownerIndex !== this.selectedUserIndex)\n                }\n            }\n            let drawPool = pool\n            if (mustDraw) {\n                drawPool = [mustDraw]\n            }\n            if (drawPool.length === 0) {\n                this.$message.warning('没有可抽取的角色')\n                this.isDrawing = false\n                return\n            }\n            // 动画洗牌\n            let shuffleTimes = 0\n            let totalDuration = 3000\n            let interval = 60\n            let elapsed = 0\n            let timer = null\n            const shuffleStep = () => {\n                this.displayRoles = shuffle(this.availableRoles)\n                shuffleTimes++\n                elapsed += interval\n                // 速度逐渐变慢\n                if (elapsed < totalDuration) {\n                    interval = Math.min(300, interval + 20)\n                    timer = setTimeout(shuffleStep, interval)\n                } else {\n                    // 停止动画，显示最终结果\n                    // 随机选一个\n                    const idx = Math.floor(Math.random() * drawPool.length)\n                    const drawRole = drawPool[idx]\n                    // 让抽中的球显示在第一个\n                    let finalDisplay = this.availableRoles.slice()\n                    finalDisplay = shuffle(finalDisplay)\n                    // 保证抽中的球在第一个\n                    finalDisplay = [drawRole].concat(finalDisplay.filter(r =>\n                        !(r.roleName === drawRole.roleName && r.xinfa === drawRole.xinfa && r.ownerIndex === drawRole.ownerIndex)\n                    ))\n                    this.displayRoles = finalDisplay\n                    setTimeout(() => {\n                        // 记录结果\n                        const user = this.userList[this.selectedUserIndex]\n                        this.drawResults.push({\n                            userName: user.userName,\n                            role: {\n                                roleName: drawRole.roleName,\n                                xinfa: drawRole.xinfa\n                            }\n                        })\n                        // 从池中移除\n                        this.availableRoles = this.availableRoles.filter(r =>\n                            !(r.roleName === drawRole.roleName && r.xinfa === drawRole.xinfa && r.ownerIndex === drawRole.ownerIndex)\n                        )\n                        if (drawRole.xinfa === 'T') this.mustT = null\n                        if (drawRole.xinfa === '奶') this.mustNai = null\n                        // 更新展示\n                        this.displayRoles = this.availableRoles.slice()\n                        // 自动切换到下一个玩家\n                        if (this.drawResults.length < this.userList.length) {\n                            let next = (this.selectedUserIndex + 1) % this.userList.length\n                            while (this.drawResults.find(r => r.userName === this.userList[next].userName)) {\n                                next = (next + 1) % this.userList.length\n                            }\n                            this.selectedUserIndex = next\n                        } else {\n                            this.selectedUserIndex = null\n                        }\n                        this.isDrawing = false\n                    }, 600)\n                }\n            }\n            shuffleStep()\n        },\n        selectUser(idx) {\n            if (this.isDrawing) return;\n            const user = this.userList[idx];\n            if (this.drawResults.some(r => r.userName === user.userName)) return;\n            this.selectedUserIndex = idx;\n        },\n        getBallStyle(idx, total) {\n            // 设定球的半径和机体半径\n            const ballR = 22; // 球半径\n            const bodyR = 160; // 机体半径（320px/2）\n            // 计算每层最多能放多少球\n            const layers = [7, 6, 5]; // 每层球数（底->上）\n            let layer = 0, posInLayer = idx;\n            let sum = 0;\n            for (let i = 0; i < layers.length; i++) {\n              if (posInLayer < layers[i]) {\n                layer = i;\n                break;\n              }\n              posInLayer -= layers[i];\n            }\n            // 层高\n            const layerHeight = 2 * ballR + 2;\n            const y = bodyR * 2 - (layer + 1) * layerHeight - 10; // 距顶部\n            // 每层球的最大宽度\n            const ballsInThisLayer = layers[layer];\n            const angleStep = Math.PI / (ballsInThisLayer + 1);\n            // 让球在底部左右分布，模拟堆叠\n            const angle = Math.PI - angleStep * (posInLayer + 1) + (Math.random() - 0.5) * 0.15;\n            const x = bodyR + Math.cos(angle) * (bodyR - ballR - 8);\n            // 保证球不会超出圆形\n            return {\n              position: 'absolute',\n              left: `${x - ballR}px`,\n              top: `${y}px`,\n              zIndex: layer,\n              transition: 'left 0.3s, top 0.3s'\n            };\n          }\n    },\n    mounted() {\n        this.resetGacha()\n    }\n}\n</script>\n\n<style scoped>\n.jx3-draw {\n    display: flex;\n    height: 100%;\n    background: hsl(162, 65%, 85%, .3);\n    min-height: 0;\n}\n\n.left {\n    flex: 1;\n    padding: 24px 16px 24px 24px;\n    background: #e9faf5;\n    border-radius: 8px;\n    min-width: 320px;\n    box-sizing: border-box;\n    overflow-y: auto;\n    height: 100%;\n    border-right: 2px solid #2a87b3;\n}\n\n.title {\n    font-size: 18px;\n    font-weight: bold;\n    margin-bottom: 16px;\n    letter-spacing: 2px;\n    color: #2a87b3;\n}\n\n.user-list {\n    background: #fff;\n    border-radius: 8px;\n    margin-bottom: 18px;\n    padding: 16px 18px 12px 18px;\n    box-shadow: 0 2px 8px rgba(42, 135, 179, 0.06);\n    border-left: 4px solid #2a87b3;\n    transition: box-shadow 0.2s;\n}\n\n.user-header {\n    display: flex;\n    align-items: center;\n    margin-bottom: 10px;\n    position: relative;\n}\n\n.user-avatar {\n    width: 28px;\n    height: 28px;\n    background: #2a87b3;\n    color: #fff;\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-weight: bold;\n    font-size: 16px;\n    margin-right: 10px;\n    box-shadow: 0 1px 4px rgba(42, 135, 179, 0.15);\n}\n\n.user-name {\n    font-weight: bold;\n    font-size: 16px;\n    margin-right: auto;\n    letter-spacing: 1px;\n    color: #2a87b3;\n}\n\n.user-actions {\n    display: flex;\n    gap: 8px;\n}\n\n.role-list {\n    padding-left: 38px;\n    display: flex;\n    flex-wrap: wrap;\n    gap: 8px;\n}\n\n.role-tag {\n    margin-bottom: 4px;\n    font-size: 13px;\n    padding: 0 8px;\n    background: #e9faf5;\n    border: 1px solid #2a87b3;\n    color: #2a87b3;\n}\n\n.role-name {\n    font-weight: 500;\n}\n\n.role-xinfa {\n    color: #2a87b3;\n    font-size: 12px;\n}\n\n.add-btn {\n    margin-top: 24px;\n    text-align: center;\n}\n\n.right {\n    flex: 2;\n    padding: 24px;\n    overflow: visible;\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    background: none;\n    height: 100%;\n    min-height: 0;\n}\n\n.gacha-header {\n    font-size: 20px;\n    font-weight: bold;\n    margin-bottom: 18px;\n    color: #2a87b3;\n    letter-spacing: 2px;\n}\n\n.gacha-flex {\n    display: flex;\n    flex-direction: row;\n    align-items: flex-start;\n    gap: 40px;\n    width: 100%;\n    height: 100%;\n    min-height: 0;\n}\n\n.gacha-machine-outer {\n    width: 380px;\n    min-width: 320px;\n    max-width: 100vw;\n    height: 100%;\n    max-height: 520px;\n    display: flex;\n    justify-content: center;\n    align-items: flex-end;\n    flex-shrink: 0;\n}\n\n.gacha-machine {\n    position: relative;\n    width: 380px;\n    height: 100%;\n    max-height: 520px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.gacha-machine-top {\n    width: 180px;\n    height: 60px;\n    background: linear-gradient(180deg, #b2e6e0 60%, #e9faf5 100%);\n    border-radius: 90px 90px 60px 60px/60px 60px 30px 30px;\n    margin-bottom: -18px;\n    z-index: 2;\n    border: 3px solid #2a87b3;\n}\n\n.gacha-machine-body {\n    width: 320px;\n    height: min(320px, 40vw, 40vh);\n    max-height: 320px;\n    background: #e9faf5;\n    border: 6px solid #2a87b3;\n    border-radius: 50%;\n    position: relative;\n    z-index: 1;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    overflow: hidden;\n    box-shadow: 0 4px 24px rgba(42, 135, 179, 0.10);\n}\n\n.gacha-balls {\n    width: 92%;\n    height: 92%;\n    display: flex;\n    flex-wrap: wrap;\n    align-items: flex-start;\n    justify-content: center;\n    gap: 10px;\n    padding: 10px 0;\n}\n\n.gacha-ball {\n    width: 44px;\n    height: 44px;\n    background: #fff;\n    border: 2px solid #2a87b3;\n    border-radius: 50%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    font-weight: bold;\n    font-size: 12px;\n    color: #2a87b3;\n    box-shadow: 0 2px 8px rgba(42, 135, 179, 0.08);\n    position: relative;\n    transition: transform 0.2s;\n    word-break: break-all;\n    padding: 2px 2px 0 2px;\n    text-align: center;\n    user-select: none;\n}\n\n.gacha-ball .ball-role-name {\n    display: block;\n    width: 100%;\n    word-break: break-all;\n    white-space: pre-line;\n    font-size: 12px;\n    line-height: 1.1;\n    margin-bottom: 0;\n}\n\n.gacha-ball.ball-t {\n    background: #e3f1ff;\n    border-color: #409EFF;\n    color: #409EFF;\n}\n\n.gacha-ball.ball-nai {\n    background: #e6fff2;\n    border-color: #52c41a;\n    color: #52c41a;\n}\n\n.gacha-ball.ball-dps {\n    background: #e9faf5;\n    border-color: #2a87b3;\n    color: #2a87b3;\n}\n\n.gacha-machine-hole {\n    width: 60px;\n    height: 30px;\n    background: #2a87b3;\n    border-radius: 0 0 30px 30px/0 0 20px 20px;\n    position: absolute;\n    left: 50%;\n    bottom: 90px;\n    transform: translateX(-50%);\n    z-index: 3;\n    border: 2px solid #2a87b3;\n    border-top: none;\n}\n\n.gacha-machine-handle {\n    width: 60px;\n    height: 60px;\n    background: #e9faf5;\n    border: 4px solid #2a87b3;\n    border-radius: 50%;\n    position: absolute;\n    left: 50%;\n    bottom: 20px;\n    transform: translateX(-50%);\n    z-index: 4;\n    box-shadow: 0 2px 8px rgba(42, 135, 179, 0.10);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n    transition: box-shadow 0.2s, background 0.2s;\n}\n\n.gacha-machine-handle:hover {\n    background: #b2e6e0;\n    box-shadow: 0 4px 16px #2a87b3;\n}\n\n.gacha-machine-handle.handle-disabled,\n.gacha-machine-handle.handle-disabled:hover {\n    background: #e0e0e0;\n    cursor: not-allowed;\n    box-shadow: none;\n    border-color: #bdbdbd;\n}\n\n.handle-inner {\n    width: 24px;\n    height: 24px;\n    background: #2a87b3;\n    border-radius: 50%;\n    box-shadow: 0 2px 8px #b2e6e0;\n}\n\n.gacha-machine-bottom {\n    width: 180px;\n    height: 60px;\n    background: linear-gradient(180deg, #e9faf5 60%, #b2e6e0 100%);\n    border-radius: 0 0 90px 90px/0 0 60px 60px;\n    margin-top: -18px;\n    z-index: 2;\n    border: 3px solid #2a87b3;\n    border-top: none;\n}\n\n.el-table {\n    font-size: 13px;\n}\n\n.user-select-container,\n.result-table-wrap {\n    max-width: 320px;\n    width: 100%;\n    margin: 0 auto;\n}\n\n.theme-table {\n    width: 100%;\n    max-width: 320px;\n    min-width: 0;\n}\n\n.theme-table ::v-deep .el-table__header th,\n.theme-table ::v-deep .el-table__cell,\n.theme-table ::v-deep .el-table__body td {\n    border: 1px solid #2a87b3 !important;\n    color: #2a87b3 !important;\n    background: #e9faf5 !important;\n}\n\n.theme-table ::v-deep .el-table__header th {\n    background: #e9faf5 !important;\n    color: #2a87b3 !important;\n    font-weight: bold;\n    border: 1px solid #2a87b3 !important;\n}\n\n.theme-table ::v-deep .el-table__body tr {\n    background: #fff !important;\n}\n\n.theme-table ::v-deep .el-table {\n    border: 1px solid #2a87b3 !important;\n    border-radius: 0 !important;\n    width: 100% !important;\n    min-width: 0;\n    max-width: 320px;\n    box-sizing: border-box;\n}\n\n.theme-table ::v-deep .el-table__body-wrapper,\n.theme-table ::v-deep .el-table__header-wrapper {\n    overflow-x: auto !important;\n}\n\n.theme-table ::v-deep .el-table {\n    width: 100% !important;\n    min-width: 240px;\n    max-width: 100%;\n}\n\n@media (max-width: 600px) {\n    .gacha-machine-outer {\n        width: 100%;\n        max-width: 100vw;\n        height: auto;\n        max-height: 60vw;\n    }\n\n    .gacha-machine {\n        width: 100%;\n        max-width: 100vw;\n        height: auto;\n        max-height: 60vw;\n    }\n\n    .gacha-machine-body {\n        width: 90vw;\n        height: 90vw;\n        max-width: 320px;\n        max-height: 320px;\n    }\n}\n\n.user-select-container {\n    border: 2px solid #2a87b3;\n    border-radius: 8px;\n    padding: 10px 8px 4px 8px;\n    margin-bottom: 18px;\n    background: #fff;\n    max-width: 320px;\n}\n\n.user-select-blocks {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 8px;\n}\n\n.user-block {\n    flex: 0 0 calc(20% - 8px);\n    /* 5个一行 */\n    box-sizing: border-box;\n    padding: 2px 0;\n    border-radius: 2px;\n    background: #e9faf5;\n    border: 1px solid #2a87b3;\n    /* color: #2a87b3; */\n    font-weight: 500;\n    font-size: 13px;\n    cursor: pointer;\n    text-align: center;\n    user-select: none;\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    min-width: 0;\n    transition: background 0.2s, color 0.2s, border 0.2s;\n    margin-bottom: 4px;\n}\n\n.user-block.selected {\n    background: #2a87b3;\n}\n\n.user-block.disabled {\n    background: #e0e0e0;\n    color: #bdbdbd;\n    border-color: #bdbdbd;\n    cursor: not-allowed;\n}\n.user-block.selected .user-block-name {\n    color: #fff !important;\n}\n.user-block-name {\n    display: inline-block;\n    max-width: 3em;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    vertical-align: middle;\n}\n\n.gacha-result-table {\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    min-width: 0;\n    flex: 1;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}