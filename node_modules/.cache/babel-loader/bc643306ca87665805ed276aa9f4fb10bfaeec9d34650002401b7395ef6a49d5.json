{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nfunction shuffle(arr) {\n  // 洗牌算法\n  let a = arr.slice();\n  for (let i = a.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n}\nexport default {\n  data() {\n    return {\n      userList: (() => {\n        // 10个玩家\n        const names = ['玩家一', '玩家二', '玩家三', '玩家四', '玩家五', '玩家六', '玩家七', '玩家八', '玩家九', '玩家十'];\n        // 先生成全部DPS\n        let allRoles = [];\n        let userList = names.map((name, idx) => {\n          let roles = [];\n          for (let i = 1; i <= 3; i++) {\n            roles.push({\n              roleName: `${name}角色${i}`,\n              xinfa: 'DPS'\n            });\n          }\n          allRoles = allRoles.concat(roles);\n          return {\n            userName: name,\n            roleList: roles\n          };\n        });\n        // 随机给1个角色设置T，3个角色设置奶\n        let allIdx = [];\n        userList.forEach((u, ui) => u.roleList.forEach((r, ri) => allIdx.push([ui, ri])));\n        // 随机T\n        let tIdx = allIdx.splice(Math.floor(Math.random() * allIdx.length), 1)[0];\n        userList[tIdx[0]].roleList[tIdx[1]].xinfa = 'T';\n        // 随机3个奶\n        for (let i = 0; i < 3; i++) {\n          let nIdx = allIdx.splice(Math.floor(Math.random() * allIdx.length), 1)[0];\n          userList[nIdx[0]].roleList[nIdx[1]].xinfa = '奶';\n        }\n        return userList;\n      })(),\n      dialogVisible: false,\n      userForm: {\n        userName: '',\n        roleList: []\n      },\n      editIndex: null,\n      selectedUserIndex: null,\n      availableRoles: [],\n      drawResults: [],\n      mustT: null,\n      mustNai: null,\n      isDrawing: false,\n      displayRoles: [],\n      drawTimer: null\n    };\n  },\n  watch: {\n    userList: {\n      handler() {\n        this.resetGacha();\n      },\n      deep: true\n    }\n  },\n  methods: {\n    getTagType(xinfa) {\n      if (xinfa === 'T') return 'danger';\n      if (xinfa === '奶') return 'success';\n      return '';\n    },\n    getBallClass(xinfa) {\n      // 主题色区分\n      if (xinfa === 'T') return 'ball-t';\n      if (xinfa === '奶') return 'ball-nai';\n      return 'ball-dps';\n    },\n    xinfaFormatter(row) {\n      if (row.role.xinfa === 'T') return 'T';\n      if (row.role.xinfa === '奶') return '奶';\n      return 'DPS';\n    },\n    openDialog() {\n      this.editIndex = null;\n      this.userForm = {\n        userName: '',\n        roleList: []\n      };\n      this.dialogVisible = true;\n    },\n    editUser(index) {\n      this.editIndex = index;\n      this.userForm = JSON.parse(JSON.stringify(this.userList[index]));\n      this.dialogVisible = true;\n    },\n    removeUser(index) {\n      this.$confirm('确定删除该玩家及其角色？', '提示', {\n        type: 'warning'\n      }).then(() => {\n        this.userList.splice(index, 1);\n      });\n    },\n    addRole() {\n      if (this.userForm.roleList.length >= 3) return;\n      this.userForm.roleList.push({\n        roleName: '',\n        xinfa: 'DPS'\n      }); // 默认DPS\n    },\n    removeRole(idx) {\n      this.userForm.roleList.splice(idx, 1);\n    },\n    handleClose() {\n      this.dialogVisible = false;\n    },\n    onSave() {\n      if (!this.userForm.userName) {\n        this.$message.warning('请输入玩家名');\n        return;\n      }\n      if (this.userForm.roleList.length === 0) {\n        this.$message.warning('请至少添加一个角色');\n        return;\n      }\n      for (const role of this.userForm.roleList) {\n        if (!role.roleName || !role.xinfa) {\n          this.$message.warning('请完善角色信息');\n          return;\n        }\n      }\n      if (this.editIndex === null) {\n        this.userList.push(JSON.parse(JSON.stringify(this.userForm)));\n      } else {\n        this.$set(this.userList, this.editIndex, JSON.parse(JSON.stringify(this.userForm)));\n      }\n      this.dialogVisible = false;\n    },\n    resetGacha() {\n      this.availableRoles = [];\n      this.drawResults = [];\n      this.selectedUserIndex = null;\n      let allRoles = [];\n      this.userList.forEach((user, idx) => {\n        user.roleList.forEach(role => {\n          allRoles.push({\n            ...role,\n            ownerIndex: idx,\n            ownerName: user.userName\n          });\n        });\n      });\n      this.mustT = allRoles.find(r => r.xinfa === 'T');\n      this.mustNai = allRoles.find(r => r.xinfa === '奶');\n      this.availableRoles = allRoles;\n      this.displayRoles = allRoles.slice();\n    },\n    handleDraw() {\n      if (this.isDrawing || this.selectedUserIndex === null || this.availableRoles.length === 0) return;\n      this.isDrawing = true;\n      let pool = this.availableRoles.filter(r => r.ownerIndex !== this.selectedUserIndex);\n      let leftUsers = this.userList.length - this.drawResults.length;\n      let mustDraw = null;\n      if (this.mustT && !this.drawResults.some(r => r.role.xinfa === 'T')) {\n        let tLeft = this.availableRoles.filter(r => r.xinfa === 'T');\n        if (tLeft.length > 0 && leftUsers === tLeft.length) {\n          mustDraw = tLeft.find(r => r.ownerIndex !== this.selectedUserIndex);\n        }\n      }\n      if (!mustDraw && this.mustNai && !this.drawResults.some(r => r.role.xinfa === '奶')) {\n        let naiLeft = this.availableRoles.filter(r => r.xinfa === '奶');\n        if (naiLeft.length > 0 && leftUsers === naiLeft.length) {\n          mustDraw = naiLeft.find(r => r.ownerIndex !== this.selectedUserIndex);\n        }\n      }\n      let drawPool = pool;\n      if (mustDraw) {\n        drawPool = [mustDraw];\n      }\n      if (drawPool.length === 0) {\n        this.$message.warning('没有可抽取的角色');\n        this.isDrawing = false;\n        return;\n      }\n      // 动画洗牌\n      let shuffleTimes = 0;\n      let totalDuration = 3000;\n      let interval = 60;\n      let elapsed = 0;\n      let timer = null;\n      const shuffleStep = () => {\n        this.displayRoles = shuffle(this.availableRoles);\n        shuffleTimes++;\n        elapsed += interval;\n        // 速度逐渐变慢\n        if (elapsed < totalDuration) {\n          interval = Math.min(300, interval + 20);\n          timer = setTimeout(shuffleStep, interval);\n        } else {\n          // 停止动画，显示最终结果\n          // 随机选一个\n          const idx = Math.floor(Math.random() * drawPool.length);\n          const drawRole = drawPool[idx];\n          // 让抽中的球显示在第一个\n          let finalDisplay = this.availableRoles.slice();\n          finalDisplay = shuffle(finalDisplay);\n          // 保证抽中的球在第一个\n          finalDisplay = [drawRole].concat(finalDisplay.filter(r => !(r.roleName === drawRole.roleName && r.xinfa === drawRole.xinfa && r.ownerIndex === drawRole.ownerIndex)));\n          this.displayRoles = finalDisplay;\n          setTimeout(() => {\n            // 记录结果\n            const user = this.userList[this.selectedUserIndex];\n            this.drawResults.push({\n              userName: user.userName,\n              role: {\n                roleName: drawRole.roleName,\n                xinfa: drawRole.xinfa\n              }\n            });\n            // 从池中移除\n            this.availableRoles = this.availableRoles.filter(r => !(r.roleName === drawRole.roleName && r.xinfa === drawRole.xinfa && r.ownerIndex === drawRole.ownerIndex));\n            if (drawRole.xinfa === 'T') this.mustT = null;\n            if (drawRole.xinfa === '奶') this.mustNai = null;\n            // 更新展示\n            this.displayRoles = this.availableRoles.slice();\n            // 自动切换到下一个玩家\n            if (this.drawResults.length < this.userList.length) {\n              let next = (this.selectedUserIndex + 1) % this.userList.length;\n              while (this.drawResults.find(r => r.userName === this.userList[next].userName)) {\n                next = (next + 1) % this.userList.length;\n              }\n              this.selectedUserIndex = next;\n            } else {\n              this.selectedUserIndex = null;\n            }\n            this.isDrawing = false;\n          }, 600);\n        }\n      };\n      shuffleStep();\n    },\n    selectUser(idx) {\n      if (this.isDrawing) return;\n      const user = this.userList[idx];\n      if (this.drawResults.some(r => r.userName === user.userName)) return;\n      this.selectedUserIndex = idx;\n    }\n  },\n  mounted() {\n    this.resetGacha();\n  }\n};","map":{"version":3,"names":["shuffle","arr","a","slice","i","length","j","Math","floor","random","data","userList","names","allRoles","map","name","idx","roles","push","roleName","xinfa","concat","userName","roleList","allIdx","forEach","u","ui","r","ri","tIdx","splice","nIdx","dialogVisible","userForm","editIndex","selectedUserIndex","availableRoles","drawResults","mustT","mustNai","isDrawing","displayRoles","drawTimer","watch","handler","resetGacha","deep","methods","getTagType","getBallClass","xinfaFormatter","row","role","openDialog","editUser","index","JSON","parse","stringify","removeUser","$confirm","type","then","addRole","removeRole","handleClose","onSave","$message","warning","$set","user","ownerIndex","ownerName","find","handleDraw","pool","filter","leftUsers","mustDraw","some","tLeft","naiLeft","drawPool","shuffleTimes","totalDuration","interval","elapsed","timer","shuffleStep","min","setTimeout","drawRole","finalDisplay","next","selectUser","mounted"],"sources":["src/modules/jx3/role-draw.vue"],"sourcesContent":["<template>\n  <div class=\"jx3-draw\">\n    <div class=\"left\">\n      <!-- ...左侧角色池部分保持不变... -->\n      <p class=\"title\">角色池</p>\n      <div\n        class=\"user-list\"\n        v-for=\"(user, index) in userList\"\n        :key=\"user.userName + index\"\n      >\n        <div class=\"user-header\">\n          <span class=\"user-avatar\">{{ user.userName.charAt(0).toUpperCase() }}</span>\n          <span class=\"user-name\">{{ user.userName }}</span>\n          <div class=\"user-actions\">\n            <el-button size=\"mini\" @click=\"editUser(index)\">编辑</el-button>\n            <el-button size=\"mini\" type=\"danger\" @click=\"removeUser(index)\">删除</el-button>\n          </div>\n        </div>\n        <div class=\"role-list\">\n          <el-tag\n            v-for=\"(role, _index) in user.roleList\"\n            :key=\"'role' + _index\"\n            size=\"small\"\n            :type=\"getTagType(role.xinfa)\"\n            class=\"role-tag\"\n          >\n            <span class=\"role-name\">{{ role.roleName }}</span>\n            <span class=\"role-xinfa\">（{{ role.xinfa }}）</span>\n          </el-tag>\n        </div>\n      </div>\n      <div class=\"add-btn\">\n        <el-button style=\"width: 200px;margin-left: 50px;\" size=\"mini\"\n          @click=\"openDialog()\">添加玩家</el-button>\n      </div>\n    </div>\n    <!-- 右侧结构调整 -->\n    <div class=\"right\">\n      <div class=\"gacha-header\">扭蛋机抽签</div>\n      <div class=\"gacha-flex\">\n        <div class=\"gacha-machine-outer\">\n          <div class=\"gacha-machine\">\n            <div class=\"gacha-machine-top\"></div>\n            <div class=\"gacha-machine-body\">\n              <div class=\"gacha-balls\">\n                <div\n                  v-for=\"(role, idx) in displayRoles\"\n                  :key=\"role.roleName + role.xinfa + idx\"\n                  class=\"gacha-ball\"\n                  :class=\"getBallClass(role.xinfa)\"\n                >\n                  <span class=\"ball-role-name\">{{ role.roleName }}</span>\n                </div>\n              </div>\n            </div>\n            <div class=\"gacha-machine-hole\"></div>\n            <!-- 扭蛋机把手 -->\n            <div\n              class=\"gacha-machine-handle\"\n              :class=\"{ 'handle-disabled': isDrawing || selectedUserIndex === null || availableRoles.length === 0 }\"\n              @click=\"handleDraw\"\n            >\n              <div class=\"handle-inner\"></div>\n            </div>\n            <div class=\"gacha-machine-bottom\"></div>\n          </div>\n        </div>\n        <div class=\"gacha-result-table\">\n          <el-select\n            v-model=\"selectedUserIndex\"\n            placeholder=\"请选择抽签玩家\"\n            size=\"small\"\n            style=\"width: 240px; margin-bottom: 16px;\"\n            :disabled=\"isDrawing\"\n          >\n            <el-option\n              v-for=\"(user, idx) in userList\"\n              :key=\"user.userName + idx\"\n              :label=\"user.userName\"\n              :value=\"idx\"\n            />\n          </el-select>\n          <el-table\n            v-if=\"drawResults.length\"\n            :data=\"drawResults\"\n            border\n            class=\"theme-table\"\n            style=\"width: 360px; margin-top: 24px;\"\n            size=\"mini\"\n            :header-cell-style=\"{background:'#e9faf5',color:'#2a87b3',fontWeight:'bold',border:'1px solid #2a87b3'}\"\n            :cell-style=\"{border:'1px solid #2a87b3',color:'#2a87b3'}\"\n            :row-style=\"{background:'#fff'}\"\n          >\n            <el-table-column prop=\"userName\" label=\"玩家\" width=\"120\"/>\n            <el-table-column prop=\"role.roleName\" label=\"抽到角色\" width=\"120\"/>\n            <el-table-column\n              prop=\"role.xinfa\"\n              label=\"心法\"\n              width=\"80\"\n              :formatter=\"xinfaFormatter\"\n            />\n          </el-table>\n        </div>\n      </div>\n    </div>\n    <!-- 添加/编辑玩家弹窗 -->\n    <el-dialog :title=\"editIndex === null ? '添加玩家' : '编辑玩家'\" :visible.sync=\"dialogVisible\" width=\"400px\" :before-close=\"handleClose\">\n      <el-form :model=\"userForm\" label-width=\"60px\">\n        <el-form-item label=\"玩家\">\n          <el-input v-model=\"userForm.userName\" size=\"mini\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"角色\">\n          <div v-for=\"(role, idx) in userForm.roleList\" :key=\"'formrole' + idx\" class=\"role-form-row\">\n            <el-input v-model=\"role.roleName\" size=\"mini\" placeholder=\"角色名\" style=\"width: 100px; margin-right: 8px;\" />\n            <el-select v-model=\"role.xinfa\" size=\"mini\" placeholder=\"心法\" style=\"width: 70px;\">\n              <el-option label=\"T\" value=\"T\"></el-option>\n              <el-option label=\"奶\" value=\"奶\"></el-option>\n              <el-option label=\"DPS\" value=\"DPS\"></el-option>\n            </el-select>\n            <el-button size=\"mini\" type=\"danger\" icon=\"el-icon-delete\" @click=\"removeRole(idx)\" />\n          </div>\n          <el-button\n            v-if=\"userForm.roleList.length < 3\"\n            class=\"button-new-tag\"\n            size=\"mini\"\n            @click=\"addRole\"\n            style=\"margin-top: 8px;\"\n          >+ 添加角色</el-button>\n        </el-form-item>\n      </el-form>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"dialogVisible = false\" size=\"mini\">取消</el-button>\n        <el-button type=\"primary\" @click=\"onSave\" size=\"mini\">确定</el-button>\n      </span>\n    </el-dialog>\n    <!-- 玩家选择区域 -->\n    <div class=\"user-select-blocks\">\n      <div\n        v-for=\"(user, idx) in userList\"\n        :key=\"user.userName + idx\"\n        class=\"user-block\"\n        :class=\"{\n          selected: selectedUserIndex === idx,\n          disabled: drawResults.some(r => r.userName === user.userName)\n        }\"\n        @click=\"selectUser(idx)\"\n      >\n        {{ user.userName }}\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nfunction shuffle(arr) {\n  // 洗牌算法\n  let a = arr.slice();\n  for (let i = a.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n}\nexport default {\n  data() {\n    return {\n      userList: (() => {\n        // 10个玩家\n        const names = [\n          '玩家一', '玩家二', '玩家三', '玩家四', '玩家五',\n          '玩家六', '玩家七', '玩家八', '玩家九', '玩家十'\n        ];\n        // 先生成全部DPS\n        let allRoles = [];\n        let userList = names.map((name, idx) => {\n          let roles = [];\n          for (let i = 1; i <= 3; i++) {\n            roles.push({ roleName: `${name}角色${i}`, xinfa: 'DPS' });\n          }\n          allRoles = allRoles.concat(roles);\n          return { userName: name, roleList: roles };\n        });\n        // 随机给1个角色设置T，3个角色设置奶\n        let allIdx = [];\n        userList.forEach((u, ui) => u.roleList.forEach((r, ri) => allIdx.push([ui, ri])));\n        // 随机T\n        let tIdx = allIdx.splice(Math.floor(Math.random() * allIdx.length), 1)[0];\n        userList[tIdx[0]].roleList[tIdx[1]].xinfa = 'T';\n        // 随机3个奶\n        for (let i = 0; i < 3; i++) {\n          let nIdx = allIdx.splice(Math.floor(Math.random() * allIdx.length), 1)[0];\n          userList[nIdx[0]].roleList[nIdx[1]].xinfa = '奶';\n        }\n        return userList;\n      })(),\n      dialogVisible: false,\n      userForm: {\n        userName: '',\n        roleList: []\n      },\n      editIndex: null,\n      selectedUserIndex: null,\n      availableRoles: [],\n      drawResults: [],\n      mustT: null,\n      mustNai: null,\n      isDrawing: false,\n      displayRoles: [],\n      drawTimer: null,\n    }\n  },\n  watch: {\n    userList: {\n      handler() {\n        this.resetGacha()\n      },\n      deep: true\n    }\n  },\n  methods: {\n    getTagType(xinfa) {\n      if (xinfa === 'T') return 'danger'\n      if (xinfa === '奶') return 'success'\n      return ''\n    },\n    getBallClass(xinfa) {\n      // 主题色区分\n      if (xinfa === 'T') return 'ball-t'\n      if (xinfa === '奶') return 'ball-nai'\n      return 'ball-dps'\n    },\n    xinfaFormatter(row) {\n      if (row.role.xinfa === 'T') return 'T'\n      if (row.role.xinfa === '奶') return '奶'\n      return 'DPS'\n    },\n    openDialog() {\n      this.editIndex = null\n      this.userForm = { userName: '', roleList: [] }\n      this.dialogVisible = true\n    },\n    editUser(index) {\n      this.editIndex = index\n      this.userForm = JSON.parse(JSON.stringify(this.userList[index]))\n      this.dialogVisible = true\n    },\n    removeUser(index) {\n      this.$confirm('确定删除该玩家及其角色？', '提示', {\n        type: 'warning'\n      }).then(() => {\n        this.userList.splice(index, 1)\n      })\n    },\n    addRole() {\n      if (this.userForm.roleList.length >= 3) return\n      this.userForm.roleList.push({ roleName: '', xinfa: 'DPS' }) // 默认DPS\n    },\n    removeRole(idx) {\n      this.userForm.roleList.splice(idx, 1)\n    },\n    handleClose() {\n      this.dialogVisible = false\n    },\n    onSave() {\n      if (!this.userForm.userName) {\n        this.$message.warning('请输入玩家名')\n        return\n      }\n      if (this.userForm.roleList.length === 0) {\n        this.$message.warning('请至少添加一个角色')\n        return\n      }\n      for (const role of this.userForm.roleList) {\n        if (!role.roleName || !role.xinfa) {\n          this.$message.warning('请完善角色信息')\n          return\n        }\n      }\n      if (this.editIndex === null) {\n        this.userList.push(JSON.parse(JSON.stringify(this.userForm)))\n      } else {\n        this.$set(this.userList, this.editIndex, JSON.parse(JSON.stringify(this.userForm)))\n      }\n      this.dialogVisible = false\n    },\n    resetGacha() {\n      this.availableRoles = []\n      this.drawResults = []\n      this.selectedUserIndex = null\n      let allRoles = []\n      this.userList.forEach((user, idx) => {\n        user.roleList.forEach(role => {\n          allRoles.push({\n            ...role,\n            ownerIndex: idx,\n            ownerName: user.userName\n          })\n        })\n      })\n      this.mustT = allRoles.find(r => r.xinfa === 'T')\n      this.mustNai = allRoles.find(r => r.xinfa === '奶')\n      this.availableRoles = allRoles\n      this.displayRoles = allRoles.slice()\n    },\n    handleDraw() {\n      if (\n        this.isDrawing ||\n        this.selectedUserIndex === null ||\n        this.availableRoles.length === 0\n      ) return\n      this.isDrawing = true\n      let pool = this.availableRoles.filter(r => r.ownerIndex !== this.selectedUserIndex)\n      let leftUsers = this.userList.length - this.drawResults.length\n      let mustDraw = null\n      if (this.mustT && !this.drawResults.some(r => r.role.xinfa === 'T')) {\n        let tLeft = this.availableRoles.filter(r => r.xinfa === 'T')\n        if (tLeft.length > 0 && leftUsers === tLeft.length) {\n          mustDraw = tLeft.find(r => r.ownerIndex !== this.selectedUserIndex)\n        }\n      }\n      if (!mustDraw && this.mustNai && !this.drawResults.some(r => r.role.xinfa === '奶')) {\n        let naiLeft = this.availableRoles.filter(r => r.xinfa === '奶')\n        if (naiLeft.length > 0 && leftUsers === naiLeft.length) {\n          mustDraw = naiLeft.find(r => r.ownerIndex !== this.selectedUserIndex)\n        }\n      }\n      let drawPool = pool\n      if (mustDraw) {\n        drawPool = [mustDraw]\n      }\n      if (drawPool.length === 0) {\n        this.$message.warning('没有可抽取的角色')\n        this.isDrawing = false\n        return\n      }\n      // 动画洗牌\n      let shuffleTimes = 0\n      let totalDuration = 3000\n      let interval = 60\n      let elapsed = 0\n      let timer = null\n      const shuffleStep = () => {\n        this.displayRoles = shuffle(this.availableRoles)\n        shuffleTimes++\n        elapsed += interval\n        // 速度逐渐变慢\n        if (elapsed < totalDuration) {\n          interval = Math.min(300, interval + 20)\n          timer = setTimeout(shuffleStep, interval)\n        } else {\n          // 停止动画，显示最终结果\n          // 随机选一个\n          const idx = Math.floor(Math.random() * drawPool.length)\n          const drawRole = drawPool[idx]\n          // 让抽中的球显示在第一个\n          let finalDisplay = this.availableRoles.slice()\n          finalDisplay = shuffle(finalDisplay)\n          // 保证抽中的球在第一个\n          finalDisplay = [drawRole].concat(finalDisplay.filter(r =>\n            !(r.roleName === drawRole.roleName && r.xinfa === drawRole.xinfa && r.ownerIndex === drawRole.ownerIndex)\n          ))\n          this.displayRoles = finalDisplay\n          setTimeout(() => {\n            // 记录结果\n            const user = this.userList[this.selectedUserIndex]\n            this.drawResults.push({\n              userName: user.userName,\n              role: {\n                roleName: drawRole.roleName,\n                xinfa: drawRole.xinfa\n              }\n            })\n            // 从池中移除\n            this.availableRoles = this.availableRoles.filter(r =>\n              !(r.roleName === drawRole.roleName && r.xinfa === drawRole.xinfa && r.ownerIndex === drawRole.ownerIndex)\n            )\n            if (drawRole.xinfa === 'T') this.mustT = null\n            if (drawRole.xinfa === '奶') this.mustNai = null\n            // 更新展示\n            this.displayRoles = this.availableRoles.slice()\n            // 自动切换到下一个玩家\n            if (this.drawResults.length < this.userList.length) {\n              let next = (this.selectedUserIndex + 1) % this.userList.length\n              while (this.drawResults.find(r => r.userName === this.userList[next].userName)) {\n                next = (next + 1) % this.userList.length\n              }\n              this.selectedUserIndex = next\n            } else {\n              this.selectedUserIndex = null\n            }\n            this.isDrawing = false\n          }, 600)\n        }\n      }\n      shuffleStep()\n    },\n    selectUser(idx) {\n      if (this.isDrawing) return;\n      const user = this.userList[idx];\n      if (this.drawResults.some(r => r.userName === user.userName)) return;\n      this.selectedUserIndex = idx;\n    }\n  },\n  mounted() {\n    this.resetGacha()\n  }\n}\n</script>\n\n<style scoped>\n.jx3-draw {\n  display: flex;\n  height: 100%;\n  background: hsl(162, 65%, 85%, .3);\n}\n.left {\n  flex: 1;\n  padding: 24px 16px 24px 24px;\n  background: #e9faf5;\n  border-radius: 8px;\n  min-width: 320px;\n  box-sizing: border-box;\n  overflow-y: auto;\n  height: 100%;\n  border-right: 2px solid #2a87b3;\n}\n.title {\n  font-size: 18px;\n  font-weight: bold;\n  margin-bottom: 16px;\n  letter-spacing: 2px;\n  color: #2a87b3;\n}\n.user-list {\n  background: #fff;\n  border-radius: 8px;\n  margin-bottom: 18px;\n  padding: 16px 18px 12px 18px;\n  box-shadow: 0 2px 8px rgba(42,135,179,0.06);\n  border-left: 4px solid #2a87b3;\n  transition: box-shadow 0.2s;\n}\n.user-header {\n  display: flex;\n  align-items: center;\n  margin-bottom: 10px;\n  position: relative;\n}\n.user-avatar {\n  width: 28px;\n  height: 28px;\n  background: #2a87b3;\n  color: #fff;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: bold;\n  font-size: 16px;\n  margin-right: 10px;\n  box-shadow: 0 1px 4px rgba(42,135,179,0.15);\n}\n.user-name {\n  font-weight: bold;\n  font-size: 16px;\n  margin-right: auto;\n  letter-spacing: 1px;\n  color: #2a87b3;\n}\n.user-actions {\n  display: flex;\n  gap: 8px;\n}\n.role-list {\n  padding-left: 38px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 8px;\n}\n.role-tag {\n  margin-bottom: 4px;\n  font-size: 13px;\n  padding: 0 8px;\n  background: #e9faf5;\n  border: 1px solid #2a87b3;\n  color: #2a87b3;\n}\n.role-name {\n  font-weight: 500;\n}\n.role-xinfa {\n  color: #2a87b3;\n  font-size: 12px;\n}\n.add-btn {\n  margin-top: 24px;\n  text-align: center;\n}\n.right {\n  flex: 2;\n  padding: 24px;\n  overflow: visible;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  background: none;\n}\n.gacha-header {\n  font-size: 20px;\n  font-weight: bold;\n  margin-bottom: 18px;\n  color: #2a87b3;\n  letter-spacing: 2px;\n}\n.gacha-flex {\n  display: flex;\n  flex-direction: row;\n  align-items: flex-start;\n  gap: 40px;\n  width: 100%;\n}\n.gacha-machine-outer {\n  width: 380px;\n  min-width: 320px;\n  display: flex;\n  justify-content: center;\n  align-items: flex-end;\n  height: 520px;\n  flex-shrink: 0;\n}\n.gacha-machine {\n  position: relative;\n  width: 380px;\n  height: 520px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n.gacha-machine-top {\n  width: 180px;\n  height: 60px;\n  background: linear-gradient(180deg, #b2e6e0 60%, #e9faf5 100%);\n  border-radius: 90px 90px 60px 60px/60px 60px 30px 30px;\n  margin-bottom: -18px;\n  z-index: 2;\n  border: 3px solid #2a87b3;\n}\n.gacha-machine-body {\n  width: 320px;\n  height: 320px;\n  background: #e9faf5;\n  border: 6px solid #2a87b3;\n  border-radius: 50%;\n  position: relative;\n  z-index: 1;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  overflow: hidden;\n  box-shadow: 0 4px 24px rgba(42,135,179,0.10);\n}\n.gacha-balls {\n  width: 92%;\n  height: 92%;\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  justify-content: center;\n  gap: 10px;\n  padding: 10px 0;\n}\n.gacha-ball {\n  width: 44px;\n  height: 44px;\n  background: #fff;\n  border: 2px solid #2a87b3;\n  border-radius: 50%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-weight: bold;\n  font-size: 12px;\n  color: #2a87b3;\n  box-shadow: 0 2px 8px rgba(42,135,179,0.08);\n  position: relative;\n  transition: transform 0.2s;\n  word-break: break-all;\n  padding: 2px 2px 0 2px;\n  text-align: center;\n  user-select: none;\n}\n.gacha-ball .ball-role-name {\n  display: block;\n  width: 100%;\n  word-break: break-all;\n  white-space: pre-line;\n  font-size: 12px;\n  line-height: 1.1;\n  margin-bottom: 0;\n}\n.gacha-ball.ball-t {\n  background: #e3f1ff;\n  border-color: #409EFF;\n  color: #409EFF;\n}\n.gacha-ball.ball-nai {\n  background: #e6fff2;\n  border-color: #52c41a;\n  color: #52c41a;\n}\n.gacha-ball.ball-dps {\n  background: #e9faf5;\n  border-color: #2a87b3;\n  color: #2a87b3;\n}\n.gacha-machine-hole {\n  width: 60px;\n  height: 30px;\n  background: #2a87b3;\n  border-radius: 0 0 30px 30px/0 0 20px 20px;\n  position: absolute;\n  left: 50%;\n  bottom: 90px;\n  transform: translateX(-50%);\n  z-index: 3;\n  border: 2px solid #2a87b3;\n  border-top: none;\n}\n.gacha-machine-handle {\n  width: 60px;\n  height: 60px;\n  background: #e9faf5;\n  border: 4px solid #2a87b3;\n  border-radius: 50%;\n  position: absolute;\n  left: 50%;\n  bottom: 20px;\n  transform: translateX(-50%);\n  z-index: 4;\n  box-shadow: 0 2px 8px rgba(42,135,179,0.10);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  transition: box-shadow 0.2s, background 0.2s;\n}\n.gacha-machine-handle:hover {\n  background: #b2e6e0;\n  box-shadow: 0 4px 16px #2a87b3;\n}\n.gacha-machine-handle.handle-disabled,\n.gacha-machine-handle.handle-disabled:hover {\n  background: #e0e0e0;\n  cursor: not-allowed;\n  box-shadow: none;\n  border-color: #bdbdbd;\n}\n.handle-inner {\n  width: 24px;\n  height: 24px;\n  background: #2a87b3;\n  border-radius: 50%;\n  box-shadow: 0 2px 8px #b2e6e0;\n}\n.gacha-machine-bottom {\n  width: 180px;\n  height: 60px;\n  background: linear-gradient(180deg, #e9faf5 60%, #b2e6e0 100%);\n  border-radius: 0 0 90px 90px/0 0 60px 60px;\n  margin-top: -18px;\n  z-index: 2;\n  border: 3px solid #2a87b3;\n  border-top: none;\n}\n.el-table {\n  font-size: 13px;\n}\n.theme-table ::v-deep .el-table__header th,\n.theme-table ::v-deep .el-table__cell,\n.theme-table ::v-deep .el-table__body td {\n  border: 1px solid #2a87b3 !important;\n  color: #2a87b3 !important;\n  background: #e9faf5 !important;\n}\n.theme-table ::v-deep .el-table__header th {\n  background: #e9faf5 !important;\n  color: #2a87b3 !important;\n  font-weight: bold;\n}\n.theme-table ::v-deep .el-table__body tr {\n  background: #fff !important;\n}\n.theme-table ::v-deep .el-table {\n  border: 1px solid #2a87b3 !important;\n  border-radius: 8px;\n  overflow: hidden;\n}\n@media (max-width: 600px) {\n  .gacha-machine-outer { width: 100%; }\n  .gacha-machine { width: 100%; }\n  .gacha-machine-body { width: 90vw; height: 90vw; }\n  .gacha-balls { gap: 6px; }\n  .gacha-ball { width: 32px; height: 32px; font-size: 10px; }\n  .gacha-machine-handle { width: 40px; height: 40px; }\n  .handle-inner { width: 16px; height: 16px; }\n}\n.user-select-blocks {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  width: 100%;\n  margin-top: 16px;\n}\n.user-block {\n  padding: 10px 16px;\n  background: #fff;\n  border: 2px solid transparent;\n  border-radius: 8px;\n  font-size: 16px;\n  font-weight: bold;\n  color: #2a87b3;\n  text-align: center;\n  cursor: pointer;\n  transition: background 0.2s, border-color 0.2s;\n}\n.user-block.selected {\n  background: #e9faf5;\n  border-color: #2a87b3;\n}\n.user-block.disabled {\n  background: #f5f5f5;\n  color: #bdbdbd;\n  cursor: not-allowed;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}