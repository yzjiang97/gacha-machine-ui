{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nfunction shuffle(arr) {\n  let a = arr.slice();\n  for (let i = a.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n}\nexport default {\n  data() {\n    return {\n      userList: (() => {\n        const names = ['玩家一', '玩家二', '玩家三', '玩家四', '玩家五', '玩家六', '玩家七', '玩家八', '玩家九', '玩家十'];\n        let allRoles = [];\n        let userList = names.map((name, idx) => {\n          let roles = [];\n          for (let i = 1; i <= 3; i++) {\n            roles.push({\n              roleName: `${name}角色${i}`,\n              xinfa: 'DPS'\n            });\n          }\n          allRoles = allRoles.concat(roles);\n          return {\n            userName: name,\n            roleList: roles\n          };\n        });\n        let allIdx = [];\n        userList.forEach((u, ui) => u.roleList.forEach((r, ri) => allIdx.push([ui, ri])));\n        let tIdx = allIdx.splice(Math.floor(Math.random() * allIdx.length), 1)[0];\n        userList[tIdx[0]].roleList[tIdx[1]].xinfa = 'T';\n        for (let i = 0; i < 3; i++) {\n          let nIdx = allIdx.splice(Math.floor(Math.random() * allIdx.length), 1)[0];\n          userList[nIdx[0]].roleList[nIdx[1]].xinfa = '奶';\n        }\n        return userList;\n      })(),\n      dialogVisible: false,\n      userForm: {\n        userName: '',\n        roleList: []\n      },\n      editIndex: null,\n      selectedUserIndex: null,\n      availableRoles: [],\n      drawResults: [],\n      mustT: null,\n      mustNai: null,\n      isDrawing: false,\n      displayRoles: [],\n      drawTimer: null,\n      isShuffling: false,\n      randomBallPositions: []\n    };\n  },\n  watch: {\n    userList: {\n      handler() {\n        this.resetGacha();\n      },\n      deep: true\n    }\n  },\n  methods: {\n    getTagType(xinfa) {\n      if (xinfa === 'T') return 'danger';\n      if (xinfa === '奶') return 'success';\n      return '';\n    },\n    getBallClass(xinfa) {\n      if (xinfa === 'T') return 'ball-t';\n      if (xinfa === '奶') return 'ball-nai';\n      return 'ball-dps';\n    },\n    xinfaFormatter(row) {\n      if (row.role.xinfa === 'T') return 'T';\n      if (row.role.xinfa === '奶') return '奶';\n      return 'DPS';\n    },\n    openDialog() {\n      this.editIndex = null;\n      this.userForm = {\n        userName: '',\n        roleList: []\n      };\n      this.dialogVisible = true;\n    },\n    editUser(index) {\n      this.editIndex = index;\n      this.userForm = JSON.parse(JSON.stringify(this.userList[index]));\n      this.dialogVisible = true;\n    },\n    removeUser(index) {\n      this.$confirm('确定删除该玩家及其角色？', '提示', {\n        type: 'warning'\n      }).then(() => {\n        this.userList.splice(index, 1);\n      });\n    },\n    addRole() {\n      if (this.userForm.roleList.length >= 3) return;\n      this.userForm.roleList.push({\n        roleName: '',\n        xinfa: 'DPS'\n      });\n    },\n    removeRole(idx) {\n      this.userForm.roleList.splice(idx, 1);\n    },\n    handleClose() {\n      this.dialogVisible = false;\n    },\n    onSave() {\n      if (!this.userForm.userName) {\n        this.$message.warning('请输入玩家名');\n        return;\n      }\n      if (this.userForm.roleList.length === 0) {\n        this.$message.warning('请至少添加一个角色');\n        return;\n      }\n      for (const role of this.userForm.roleList) {\n        if (!role.roleName || !role.xinfa) {\n          this.$message.warning('请完善角色信息');\n          return;\n        }\n      }\n      if (this.editIndex === null) {\n        this.userList.push(JSON.parse(JSON.stringify(this.userForm)));\n      } else {\n        this.$set(this.userList, this.editIndex, JSON.parse(JSON.stringify(this.userForm)));\n      }\n      this.dialogVisible = false;\n    },\n    resetGacha() {\n      this.availableRoles = [];\n      this.drawResults = [];\n      this.selectedUserIndex = null;\n      let allRoles = [];\n      this.userList.forEach((user, idx) => {\n        user.roleList.forEach(role => {\n          allRoles.push({\n            ...role,\n            ownerIndex: idx,\n            ownerName: user.userName\n          });\n        });\n      });\n      this.mustT = allRoles.find(r => r.xinfa === 'T');\n      this.mustNai = allRoles.find(r => r.xinfa === '奶');\n      this.availableRoles = allRoles;\n      this.displayRoles = allRoles.slice();\n    },\n    // 生成圆内随机不重叠坐标\n    getRandomBallPositions(count) {\n      const bodyR = 160;\n      const ballR = 30;\n      let positions = [];\n      let tries = 0;\n      while (positions.length < count && tries < 1000) {\n        tries++;\n        const angle = Math.random() * 2 * Math.PI;\n        const r = (bodyR - ballR - 6) * Math.sqrt(Math.random());\n        const x = bodyR + r * Math.cos(angle);\n        const y = bodyR + r * Math.sin(angle);\n        let overlap = positions.some(pos => Math.hypot(pos.x - x, pos.y - y) < ballR * 2 - 4);\n        if (!overlap) positions.push({\n          x,\n          y\n        });\n      }\n      while (positions.length < count) {\n        positions.push({\n          x: bodyR,\n          y: bodyR\n        });\n      }\n      return positions;\n    },\n    // 动态堆叠球算法或动画\n    getVisibleBallsAndPositions() {\n      if (this.isShuffling && this.randomBallPositions.length) {\n        return this.displayRoles.slice(0, this.randomBallPositions.length).map((role, idx) => ({\n          role,\n          style: {\n            position: 'absolute',\n            left: `${this.randomBallPositions[idx].x - 30}px`,\n            top: `${this.randomBallPositions[idx].y - 30}px`,\n            zIndex: 100,\n            transition: 'left 0.3s, top 0.3s'\n          }\n        }));\n      }\n      // 正常堆叠\n      const bodyR = 160;\n      const ballR = 30;\n      const ballD = ballR * 2;\n      const padding = 2;\n      const centerX = bodyR;\n      const centerY = bodyR;\n      let balls = [];\n      let idx = 0;\n      let y = bodyR * 2 - ballR - padding;\n      const maxLayers = Math.floor((bodyR * 2 - padding) / (ballD + padding));\n      for (let layer = 0; layer < maxLayers && idx < this.displayRoles.length; layer++) {\n        y = bodyR * 2 - ballR - padding - layer * (ballD + padding);\n        const dy = Math.abs(centerY - y);\n        const layerR = Math.sqrt(Math.max(0, bodyR * bodyR - dy * dy));\n        const layerWidth = layerR * 2 - padding * 2;\n        const ballsInLayer = Math.floor((layerWidth + padding) / (ballD + padding));\n        if (ballsInLayer <= 0) break;\n        const offsetX = centerX - (ballsInLayer * (ballD + padding) - padding) / 2 + ballR;\n        for (let i = 0; i < ballsInLayer && idx < this.displayRoles.length; i++, idx++) {\n          const x = offsetX + i * (ballD + padding);\n          balls.push({\n            role: this.displayRoles[idx],\n            style: {\n              position: 'absolute',\n              left: `${x - ballR}px`,\n              top: `${y - ballR}px`,\n              zIndex: 100 - y,\n              transition: 'left 0.3s, top 0.3s'\n            }\n          });\n        }\n      }\n      return balls;\n    },\n    handleDraw() {\n      if (this.isDrawing || this.selectedUserIndex === null || this.availableRoles.length === 0) return;\n      this.isDrawing = true;\n      this.isShuffling = true;\n      let pool = this.availableRoles.filter(r => r.ownerIndex !== this.selectedUserIndex);\n      let leftUsers = this.userList.length - this.drawResults.length;\n      let mustDraw = null;\n      if (this.mustT && !this.drawResults.some(r => r.role.xinfa === 'T')) {\n        let tLeft = this.availableRoles.filter(r => r.xinfa === 'T');\n        if (tLeft.length > 0 && leftUsers === tLeft.length) {\n          mustDraw = tLeft.find(r => r.ownerIndex !== this.selectedUserIndex);\n        }\n      }\n      if (!mustDraw && this.mustNai && !this.drawResults.some(r => r.role.xinfa === '奶')) {\n        let naiLeft = this.availableRoles.filter(r => r.xinfa === '奶');\n        if (naiLeft.length > 0 && leftUsers === naiLeft.length) {\n          mustDraw = naiLeft.find(r => r.ownerIndex !== this.selectedUserIndex);\n        }\n      }\n      let drawPool = pool;\n      if (mustDraw) {\n        drawPool = [mustDraw];\n      }\n      if (drawPool.length === 0) {\n        this.$message.warning('没有可抽取的角色');\n        this.isDrawing = false;\n        this.isShuffling = false;\n        return;\n      }\n      // 动画洗牌\n      let shuffleTimes = 0;\n      let totalDuration = 2000;\n      let interval = 120;\n      let elapsed = 0;\n      let timer = null;\n      const shuffleStep = () => {\n        this.randomBallPositions = this.getRandomBallPositions(this.displayRoles.length);\n        shuffleTimes++;\n        elapsed += interval;\n        if (elapsed < totalDuration) {\n          interval = Math.max(60, interval - 10);\n          timer = setTimeout(shuffleStep, interval);\n        } else {\n          this.isShuffling = false;\n          this.randomBallPositions = [];\n\n          // ====== 关键：加权抽取 ======\n          // 统计T、奶、DPS\n          const tList = drawPool.filter(r => r.xinfa === 'T');\n          const naiList = drawPool.filter(r => r.xinfa === '奶');\n          const dpsList = drawPool.filter(r => r.xinfa !== 'T' && r.xinfa !== '奶');\n          let weightedPool = [];\n\n          // T和奶各10%，如果有多个T/奶则平分\n          const tWeight = tList.length > 0 ? 0.1 : 0;\n          const naiWeight = naiList.length > 0 ? 0.1 : 0;\n          const dpsWeight = 1 - tWeight - naiWeight;\n\n          // 计算每个T/奶/DPS的权重\n          tList.forEach(r => {\n            for (let i = 0; i < Math.round(100 * tWeight / tList.length); i++) {\n              weightedPool.push(r);\n            }\n          });\n          naiList.forEach(r => {\n            for (let i = 0; i < Math.round(100 * naiWeight / naiList.length); i++) {\n              weightedPool.push(r);\n            }\n          });\n          dpsList.forEach(r => {\n            for (let i = 0; i < Math.round(100 * dpsWeight / dpsList.length); i++) {\n              weightedPool.push(r);\n            }\n          });\n\n          // 防止加权池为空\n          if (weightedPool.length === 0) weightedPool = drawPool.slice();\n\n          // 随机抽取\n          const idx = Math.floor(Math.random() * weightedPool.length);\n          const drawRole = weightedPool[idx];\n          // ====== 关键结束 ======\n\n          let finalDisplay = this.availableRoles.slice();\n          finalDisplay = shuffle(finalDisplay);\n          finalDisplay = [drawRole].concat(finalDisplay.filter(r => !(r.roleName === drawRole.roleName && r.xinfa === drawRole.xinfa && r.ownerIndex === drawRole.ownerIndex)));\n          this.displayRoles = finalDisplay;\n          setTimeout(() => {\n            const user = this.userList[this.selectedUserIndex];\n            this.drawResults.push({\n              userName: user.userName,\n              role: {\n                roleName: drawRole.roleName,\n                xinfa: drawRole.xinfa\n              }\n            });\n            if (drawRole.xinfa === 'T' || drawRole.xinfa === '奶') {\n              this.availableRoles = this.availableRoles.filter(r => r.xinfa !== drawRole.xinfa);\n              if (drawRole.xinfa === 'T') this.mustT = null;\n              if (drawRole.xinfa === '奶') this.mustNai = null;\n            } else {\n              this.availableRoles = this.availableRoles.filter(r => !(r.roleName === drawRole.roleName && r.xinfa === drawRole.xinfa && r.ownerIndex === drawRole.ownerIndex));\n            }\n            this.displayRoles = this.availableRoles.slice();\n            if (this.drawResults.length < this.userList.length) {\n              let next = (this.selectedUserIndex + 1) % this.userList.length;\n              while (this.drawResults.find(r => r.userName === this.userList[next].userName)) {\n                next = (next + 1) % this.userList.length;\n              }\n              this.selectedUserIndex = next;\n            } else {\n              this.selectedUserIndex = null;\n            }\n            this.isDrawing = false;\n          }, 600);\n        }\n      };\n      shuffleStep();\n    },\n    selectUser(idx) {\n      if (this.isDrawing) return;\n      const user = this.userList[idx];\n      if (this.drawResults.some(r => r.userName === user.userName)) return;\n      this.selectedUserIndex = idx;\n    }\n  },\n  mounted() {\n    this.resetGacha();\n  }\n};","map":{"version":3,"names":["shuffle","arr","a","slice","i","length","j","Math","floor","random","data","userList","names","allRoles","map","name","idx","roles","push","roleName","xinfa","concat","userName","roleList","allIdx","forEach","u","ui","r","ri","tIdx","splice","nIdx","dialogVisible","userForm","editIndex","selectedUserIndex","availableRoles","drawResults","mustT","mustNai","isDrawing","displayRoles","drawTimer","isShuffling","randomBallPositions","watch","handler","resetGacha","deep","methods","getTagType","getBallClass","xinfaFormatter","row","role","openDialog","editUser","index","JSON","parse","stringify","removeUser","$confirm","type","then","addRole","removeRole","handleClose","onSave","$message","warning","$set","user","ownerIndex","ownerName","find","getRandomBallPositions","count","bodyR","ballR","positions","tries","angle","PI","sqrt","x","cos","y","sin","overlap","some","pos","hypot","getVisibleBallsAndPositions","style","position","left","top","zIndex","transition","ballD","padding","centerX","centerY","balls","maxLayers","layer","dy","abs","layerR","max","layerWidth","ballsInLayer","offsetX","handleDraw","pool","filter","leftUsers","mustDraw","tLeft","naiLeft","drawPool","shuffleTimes","totalDuration","interval","elapsed","timer","shuffleStep","setTimeout","tList","naiList","dpsList","weightedPool","tWeight","naiWeight","dpsWeight","round","drawRole","finalDisplay","next","selectUser","mounted"],"sources":["src/modules/jx3/role-draw.vue"],"sourcesContent":["<template>\n    <div class=\"jx3-draw\">\n        <div class=\"left\">\n            <p class=\"title\">角色池</p>\n            <div class=\"user-list\" v-for=\"(user, index) in userList\" :key=\"user.userName + index\">\n                <div class=\"user-header\">\n                    <span class=\"user-avatar\">{{ user.userName.charAt(0).toUpperCase() }}</span>\n                    <span class=\"user-name\">{{ user.userName }}</span>\n                    <div class=\"user-actions\">\n                        <el-button size=\"mini\" @click=\"editUser(index)\">编辑</el-button>\n                        <el-button size=\"mini\" type=\"danger\" @click=\"removeUser(index)\">删除</el-button>\n                    </div>\n                </div>\n                <div class=\"role-list\">\n                    <el-tag v-for=\"(role, _index) in user.roleList\" :key=\"'role' + _index\" size=\"small\"\n                        :type=\"getTagType(role.xinfa)\" class=\"role-tag\">\n                        <span class=\"role-name\">{{ role.roleName }}</span>\n                        <span class=\"role-xinfa\">（{{ role.xinfa }}）</span>\n                    </el-tag>\n                </div>\n            </div>\n            <div class=\"add-btn\">\n                <el-button style=\"width: 200px;margin-left: 50px;\" size=\"mini\" @click=\"openDialog()\">添加玩家</el-button>\n            </div>\n        </div>\n        <!-- 右侧结构调整 -->\n        <div class=\"right\">\n            <div class=\"gacha-header\">扭蛋机抽签</div>\n            <div class=\"gacha-flex\">\n                <div class=\"gacha-machine-outer\">\n                    <div class=\"gacha-machine\">\n                        <div class=\"gacha-machine-top\"></div>\n                        <div class=\"gacha-machine-body\">\n                            <div class=\"gacha-balls\">\n                                <div\n                                    v-for=\"(item, idx) in getVisibleBallsAndPositions()\"\n                                    :key=\"item.role.roleName + item.role.xinfa + idx\"\n                                    class=\"gacha-ball\"\n                                    :class=\"getBallClass(item.role.xinfa)\"\n                                    :style=\"item.style\"\n                                >\n                                    <span class=\"ball-role-name\">{{ item.role.roleName }}</span>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"gacha-machine-hole\"></div>\n                        <!-- 扭蛋机把手 -->\n                        <div class=\"gacha-machine-handle\"\n                            :class=\"{ 'handle-disabled': isDrawing || selectedUserIndex === null || availableRoles.length === 0 }\"\n                            @click=\"handleDraw\">\n                            <div class=\"handle-inner\"></div>\n                        </div>\n                        <div class=\"gacha-machine-bottom\"></div>\n                    </div>\n                </div>\n                <div class=\"gacha-result-table\">\n                    <!-- 角色选择区标题 -->\n                    <div class=\"gacha-section-title\">选择抽签玩家</div>\n                    <div class=\"user-select-container\">\n                        <div class=\"user-select-blocks\">\n                            <div v-for=\"(user, idx) in userList\" :key=\"user.userName + idx\" class=\"user-block role-tag\"\n                                :class=\"{\n                                    selected: selectedUserIndex === idx,\n                                    disabled: drawResults.some(r => r.userName === user.userName)\n                                }\" @click=\"selectUser(idx)\">\n                                <span class=\"user-block-name\">{{ user.userName }}</span>\n                            </div>\n                        </div>\n                    </div>\n                    <!-- 结果区标题 -->\n                    <div class=\"gacha-section-title\" style=\"margin-top: 10px;\">抽签结果</div>\n                    <div class=\"result-table-wrap\">\n                        <el-table v-if=\"drawResults.length\" :data=\"drawResults\" border class=\"theme-table\" size=\"mini\"\n                            :header-cell-style=\"{ background: '#e9faf5', color: '#2a87b3', fontWeight: 'bold', border: '1px solid #2a87b3' }\"\n                            :cell-style=\"{ border: '1px solid #2a87b3', color: '#2a87b3' }\" :row-style=\"{ background: '#fff' }\">\n                            <el-table-column prop=\"userName\" label=\"玩家\" />\n                            <el-table-column prop=\"role.roleName\" label=\"抽到角色\" />\n                            <el-table-column prop=\"role.xinfa\" label=\"心法\" :formatter=\"xinfaFormatter\" />\n                        </el-table>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <!-- 添加/编辑玩家弹窗 -->\n        <el-dialog :title=\"editIndex === null ? '添加玩家' : '编辑玩家'\" :visible.sync=\"dialogVisible\" width=\"400px\"\n            :before-close=\"handleClose\">\n            <el-form :model=\"userForm\" label-width=\"60px\">\n                <el-form-item label=\"玩家\">\n                    <el-input v-model=\"userForm.userName\" size=\"mini\"></el-input>\n                </el-form-item>\n                <el-form-item label=\"角色\">\n                    <div v-for=\"(role, idx) in userForm.roleList\" :key=\"'formrole' + idx\" class=\"role-form-row\">\n                        <el-input v-model=\"role.roleName\" size=\"mini\" placeholder=\"角色名\"\n                            style=\"width: 100px; margin-right: 8px;\" />\n                        <el-select v-model=\"role.xinfa\" size=\"mini\" placeholder=\"心法\" style=\"width: 70px;\">\n                            <el-option label=\"T\" value=\"T\"></el-option>\n                            <el-option label=\"奶\" value=\"奶\"></el-option>\n                            <el-option label=\"DPS\" value=\"DPS\"></el-option>\n                        </el-select>\n                        <el-button size=\"mini\" type=\"danger\" icon=\"el-icon-delete\" @click=\"removeRole(idx)\" />\n                    </div>\n                    <el-button v-if=\"userForm.roleList.length < 3\" class=\"button-new-tag\" size=\"mini\" @click=\"addRole\"\n                        style=\"margin-top: 8px;\">+ 添加角色</el-button>\n                </el-form-item>\n            </el-form>\n            <span slot=\"footer\" class=\"dialog-footer\">\n                <el-button @click=\"dialogVisible = false\" size=\"mini\">取消</el-button>\n                <el-button type=\"primary\" @click=\"onSave\" size=\"mini\">确定</el-button>\n            </span>\n        </el-dialog>\n    </div>\n</template>\n\n<script>\nfunction shuffle(arr) {\n    let a = arr.slice();\n    for (let i = a.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n}\nexport default {\n    data() {\n        return {\n            userList: (() => {\n                const names = [\n                    '玩家一', '玩家二', '玩家三', '玩家四', '玩家五',\n                    '玩家六', '玩家七', '玩家八', '玩家九', '玩家十'\n                ];\n                let allRoles = [];\n                let userList = names.map((name, idx) => {\n                    let roles = [];\n                    for (let i = 1; i <= 3; i++) {\n                        roles.push({ roleName: `${name}角色${i}`, xinfa: 'DPS' });\n                    }\n                    allRoles = allRoles.concat(roles);\n                    return { userName: name, roleList: roles };\n                });\n                let allIdx = [];\n                userList.forEach((u, ui) => u.roleList.forEach((r, ri) => allIdx.push([ui, ri])));\n                let tIdx = allIdx.splice(Math.floor(Math.random() * allIdx.length), 1)[0];\n                userList[tIdx[0]].roleList[tIdx[1]].xinfa = 'T';\n                for (let i = 0; i < 3; i++) {\n                    let nIdx = allIdx.splice(Math.floor(Math.random() * allIdx.length), 1)[0];\n                    userList[nIdx[0]].roleList[nIdx[1]].xinfa = '奶';\n                }\n                return userList;\n            })(),\n            dialogVisible: false,\n            userForm: {\n                userName: '',\n                roleList: []\n            },\n            editIndex: null,\n            selectedUserIndex: null,\n            availableRoles: [],\n            drawResults: [],\n            mustT: null,\n            mustNai: null,\n            isDrawing: false,\n            displayRoles: [],\n            drawTimer: null,\n            isShuffling: false,\n            randomBallPositions: [],\n        }\n    },\n    watch: {\n        userList: {\n            handler() {\n                this.resetGacha()\n            },\n            deep: true\n        }\n    },\n    methods: {\n        getTagType(xinfa) {\n            if (xinfa === 'T') return 'danger'\n            if (xinfa === '奶') return 'success'\n            return ''\n        },\n        getBallClass(xinfa) {\n            if (xinfa === 'T') return 'ball-t'\n            if (xinfa === '奶') return 'ball-nai'\n            return 'ball-dps'\n        },\n        xinfaFormatter(row) {\n            if (row.role.xinfa === 'T') return 'T'\n            if (row.role.xinfa === '奶') return '奶'\n            return 'DPS'\n        },\n        openDialog() {\n            this.editIndex = null\n            this.userForm = { userName: '', roleList: [] }\n            this.dialogVisible = true\n        },\n        editUser(index) {\n            this.editIndex = index\n            this.userForm = JSON.parse(JSON.stringify(this.userList[index]))\n            this.dialogVisible = true\n        },\n        removeUser(index) {\n            this.$confirm('确定删除该玩家及其角色？', '提示', {\n                type: 'warning'\n            }).then(() => {\n                this.userList.splice(index, 1)\n            })\n        },\n        addRole() {\n            if (this.userForm.roleList.length >= 3) return\n            this.userForm.roleList.push({ roleName: '', xinfa: 'DPS' })\n        },\n        removeRole(idx) {\n            this.userForm.roleList.splice(idx, 1)\n        },\n        handleClose() {\n            this.dialogVisible = false\n        },\n        onSave() {\n            if (!this.userForm.userName) {\n                this.$message.warning('请输入玩家名')\n                return\n            }\n            if (this.userForm.roleList.length === 0) {\n                this.$message.warning('请至少添加一个角色')\n                return\n            }\n            for (const role of this.userForm.roleList) {\n                if (!role.roleName || !role.xinfa) {\n                    this.$message.warning('请完善角色信息')\n                    return\n                }\n            }\n            if (this.editIndex === null) {\n                this.userList.push(JSON.parse(JSON.stringify(this.userForm)))\n            } else {\n                this.$set(this.userList, this.editIndex, JSON.parse(JSON.stringify(this.userForm)))\n            }\n            this.dialogVisible = false\n        },\n        resetGacha() {\n            this.availableRoles = []\n            this.drawResults = []\n            this.selectedUserIndex = null\n            let allRoles = []\n            this.userList.forEach((user, idx) => {\n                user.roleList.forEach(role => {\n                    allRoles.push({\n                        ...role,\n                        ownerIndex: idx,\n                        ownerName: user.userName\n                    })\n                })\n            })\n            this.mustT = allRoles.find(r => r.xinfa === 'T')\n            this.mustNai = allRoles.find(r => r.xinfa === '奶')\n            this.availableRoles = allRoles\n            this.displayRoles = allRoles.slice()\n        },\n        // 生成圆内随机不重叠坐标\n        getRandomBallPositions(count) {\n            const bodyR = 160;\n            const ballR = 30;\n            let positions = [];\n            let tries = 0;\n            while (positions.length < count && tries < 1000) {\n                tries++;\n                const angle = Math.random() * 2 * Math.PI;\n                const r = (bodyR - ballR - 6) * Math.sqrt(Math.random());\n                const x = bodyR + r * Math.cos(angle);\n                const y = bodyR + r * Math.sin(angle);\n                let overlap = positions.some(pos =>\n                    Math.hypot(pos.x - x, pos.y - y) < ballR * 2 - 4\n                );\n                if (!overlap) positions.push({ x, y });\n            }\n            while (positions.length < count) {\n                positions.push({ x: bodyR, y: bodyR });\n            }\n            return positions;\n        },\n        // 动态堆叠球算法或动画\n        getVisibleBallsAndPositions() {\n            if (this.isShuffling && this.randomBallPositions.length) {\n                return this.displayRoles.slice(0, this.randomBallPositions.length).map((role, idx) => ({\n                    role,\n                    style: {\n                        position: 'absolute',\n                        left: `${this.randomBallPositions[idx].x - 30}px`,\n                        top: `${this.randomBallPositions[idx].y - 30}px`,\n                        zIndex: 100,\n                        transition: 'left 0.3s, top 0.3s'\n                    }\n                }));\n            }\n            // 正常堆叠\n            const bodyR = 160;\n            const ballR = 30;\n            const ballD = ballR * 2;\n            const padding = 2;\n            const centerX = bodyR;\n            const centerY = bodyR;\n            let balls = [];\n            let idx = 0;\n            let y = bodyR * 2 - ballR - padding;\n            const maxLayers = Math.floor((bodyR * 2 - padding) / (ballD + padding));\n            for (let layer = 0; layer < maxLayers && idx < this.displayRoles.length; layer++) {\n                y = bodyR * 2 - ballR - padding - layer * (ballD + padding);\n                const dy = Math.abs(centerY - y);\n                const layerR = Math.sqrt(Math.max(0, bodyR * bodyR - dy * dy));\n                const layerWidth = layerR * 2 - padding * 2;\n                const ballsInLayer = Math.floor((layerWidth + padding) / (ballD + padding));\n                if (ballsInLayer <= 0) break;\n                const offsetX = centerX - (ballsInLayer * (ballD + padding) - padding) / 2 + ballR;\n                for (let i = 0; i < ballsInLayer && idx < this.displayRoles.length; i++, idx++) {\n                    const x = offsetX + i * (ballD + padding);\n                    balls.push({\n                        role: this.displayRoles[idx],\n                        style: {\n                            position: 'absolute',\n                            left: `${x - ballR}px`,\n                            top: `${y - ballR}px`,\n                            zIndex: 100 - y,\n                            transition: 'left 0.3s, top 0.3s'\n                        }\n                    });\n                }\n            }\n            return balls;\n        },\n        handleDraw() {\n            if (\n                this.isDrawing ||\n                this.selectedUserIndex === null ||\n                this.availableRoles.length === 0\n            ) return\n            this.isDrawing = true\n            this.isShuffling = true\n            let pool = this.availableRoles.filter(r => r.ownerIndex !== this.selectedUserIndex)\n            let leftUsers = this.userList.length - this.drawResults.length\n            let mustDraw = null\n            if (this.mustT && !this.drawResults.some(r => r.role.xinfa === 'T')) {\n                let tLeft = this.availableRoles.filter(r => r.xinfa === 'T')\n                if (tLeft.length > 0 && leftUsers === tLeft.length) {\n                    mustDraw = tLeft.find(r => r.ownerIndex !== this.selectedUserIndex)\n                }\n            }\n            if (!mustDraw && this.mustNai && !this.drawResults.some(r => r.role.xinfa === '奶')) {\n                let naiLeft = this.availableRoles.filter(r => r.xinfa === '奶')\n                if (naiLeft.length > 0 && leftUsers === naiLeft.length) {\n                    mustDraw = naiLeft.find(r => r.ownerIndex !== this.selectedUserIndex)\n                }\n            }\n            let drawPool = pool\n            if (mustDraw) {\n                drawPool = [mustDraw]\n            }\n            if (drawPool.length === 0) {\n                this.$message.warning('没有可抽取的角色')\n                this.isDrawing = false\n                this.isShuffling = false\n                return\n            }\n            // 动画洗牌\n            let shuffleTimes = 0\n            let totalDuration = 2000\n            let interval = 120\n            let elapsed = 0\n            let timer = null\n            const shuffleStep = () => {\n                this.randomBallPositions = this.getRandomBallPositions(this.displayRoles.length)\n                shuffleTimes++\n                elapsed += interval\n                if (elapsed < totalDuration) {\n                    interval = Math.max(60, interval - 10)\n                    timer = setTimeout(shuffleStep, interval)\n                } else {\n                    this.isShuffling = false\n                    this.randomBallPositions = []\n\n                    // ====== 关键：加权抽取 ======\n                    // 统计T、奶、DPS\n                    const tList = drawPool.filter(r => r.xinfa === 'T')\n                    const naiList = drawPool.filter(r => r.xinfa === '奶')\n                    const dpsList = drawPool.filter(r => r.xinfa !== 'T' && r.xinfa !== '奶')\n                    let weightedPool = []\n\n                    // T和奶各10%，如果有多个T/奶则平分\n                    const tWeight = tList.length > 0 ? 0.1 : 0\n                    const naiWeight = naiList.length > 0 ? 0.1 : 0\n                    const dpsWeight = 1 - tWeight - naiWeight\n\n                    // 计算每个T/奶/DPS的权重\n                    tList.forEach(r => {\n                        for (let i = 0; i < Math.round(100 * tWeight / tList.length); i++) {\n                            weightedPool.push(r)\n                        }\n                    })\n                    naiList.forEach(r => {\n                        for (let i = 0; i < Math.round(100 * naiWeight / naiList.length); i++) {\n                            weightedPool.push(r)\n                        }\n                    })\n                    dpsList.forEach(r => {\n                        for (let i = 0; i < Math.round(100 * dpsWeight / dpsList.length); i++) {\n                            weightedPool.push(r)\n                        }\n                    })\n\n                    // 防止加权池为空\n                    if (weightedPool.length === 0) weightedPool = drawPool.slice()\n\n                    // 随机抽取\n                    const idx = Math.floor(Math.random() * weightedPool.length)\n                    const drawRole = weightedPool[idx]\n                    // ====== 关键结束 ======\n\n                    let finalDisplay = this.availableRoles.slice()\n                    finalDisplay = shuffle(finalDisplay)\n                    finalDisplay = [drawRole].concat(finalDisplay.filter(r =>\n                        !(r.roleName === drawRole.roleName && r.xinfa === drawRole.xinfa && r.ownerIndex === drawRole.ownerIndex)\n                    ))\n                    this.displayRoles = finalDisplay\n                    setTimeout(() => {\n                        const user = this.userList[this.selectedUserIndex]\n                        this.drawResults.push({\n                            userName: user.userName,\n                            role: {\n                                roleName: drawRole.roleName,\n                                xinfa: drawRole.xinfa\n                            }\n                        })\n                        if (drawRole.xinfa === 'T' || drawRole.xinfa === '奶') {\n                            this.availableRoles = this.availableRoles.filter(r => r.xinfa !== drawRole.xinfa)\n                            if (drawRole.xinfa === 'T') this.mustT = null\n                            if (drawRole.xinfa === '奶') this.mustNai = null\n                        } else {\n                            this.availableRoles = this.availableRoles.filter(r =>\n                                !(r.roleName === drawRole.roleName && r.xinfa === drawRole.xinfa && r.ownerIndex === drawRole.ownerIndex)\n                            )\n                        }\n                        this.displayRoles = this.availableRoles.slice()\n                        if (this.drawResults.length < this.userList.length) {\n                            let next = (this.selectedUserIndex + 1) % this.userList.length\n                            while (this.drawResults.find(r => r.userName === this.userList[next].userName)) {\n                                next = (next + 1) % this.userList.length\n                            }\n                            this.selectedUserIndex = next\n                        } else {\n                            this.selectedUserIndex = null\n                        }\n                        this.isDrawing = false\n                    }, 600)\n                }\n            }\n            shuffleStep()\n        },\n        selectUser(idx) {\n            if (this.isDrawing) return;\n            const user = this.userList[idx];\n            if (this.drawResults.some(r => r.userName === user.userName)) return;\n            this.selectedUserIndex = idx;\n        }\n    },\n    mounted() {\n        this.resetGacha()\n    }\n}\n</script>\n\n<style scoped>\n.jx3-draw {\n    display: flex;\n    height: 100%;\n    background: hsl(162, 65%, 85%, .3);\n    min-height: 0;\n}\n\n.left {\n    flex: 1;\n    padding: 24px 16px 24px 24px;\n    background: #e9faf5;\n    border-radius: 8px;\n    min-width: 320px;\n    box-sizing: border-box;\n    overflow-y: auto;\n    height: 100%;\n    border-right: 2px solid #2a87b3;\n}\n\n.title {\n    font-size: 18px;\n    font-weight: bold;\n    margin-bottom: 16px;\n    letter-spacing: 2px;\n    color: #2a87b3;\n}\n\n.user-list {\n    background: #fff;\n    border-radius: 8px;\n    margin-bottom: 18px;\n    padding: 16px 18px 12px 18px;\n    box-shadow: 0 2px 8px rgba(42, 135, 179, 0.06);\n    border-left: 4px solid #2a87b3;\n    transition: box-shadow 0.2s;\n}\n\n.user-header {\n    display: flex;\n    align-items: center;\n    margin-bottom: 10px;\n    position: relative;\n}\n\n.user-avatar {\n    width: 28px;\n    height: 28px;\n    background: #2a87b3;\n    color: #fff;\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-weight: bold;\n    font-size: 16px;\n    margin-right: 10px;\n    box-shadow: 0 1px 4px rgba(42, 135, 179, 0.15);\n}\n\n.user-name {\n    font-weight: bold;\n    font-size: 16px;\n    margin-right: auto;\n    letter-spacing: 1px;\n    color: #2a87b3;\n}\n\n.user-actions {\n    display: flex;\n    gap: 8px;\n}\n\n.role-list {\n    padding-left: 38px;\n    display: flex;\n    flex-wrap: wrap;\n    gap: 8px;\n}\n\n.role-tag {\n    margin-bottom: 4px;\n    font-size: 13px;\n    padding: 0 8px;\n    background: #e9faf5;\n    border: 1px solid #2a87b3;\n    color: #2a87b3;\n    border-radius: 8px;\n}\n\n.role-name {\n    font-weight: 500;\n}\n\n.role-xinfa {\n    color: #2a87b3;\n    font-size: 12px;\n}\n\n.add-btn {\n    margin-top: 24px;\n    text-align: center;\n}\n\n.right {\n    flex: 2;\n    padding: 24px;\n    overflow: visible;\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    background: none;\n    height: 100%;\n    min-height: 0;\n}\n\n.gacha-header {\n    font-size: 20px;\n    font-weight: bold;\n    margin-bottom: 18px;\n    color: #2a87b3;\n    letter-spacing: 2px;\n}\n\n.gacha-flex {\n    display: flex;\n    flex-direction: row;\n    align-items: flex-start;\n    gap: 40px;\n    width: 100%;\n    height: 100%;\n    min-height: 0;\n}\n\n.gacha-machine-outer {\n    width: 380px;\n    min-width: 320px;\n    height: 520px;\n    max-width: 100vw;\n    max-height: 520px;\n    display: flex;\n    justify-content: center;\n    align-items: flex-end;\n    flex-shrink: 0;\n}\n\n.gacha-machine {\n    position: relative;\n    width: 380px;\n    height: 520px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.gacha-machine-top {\n    width: 180px;\n    height: 60px;\n    background: linear-gradient(180deg, #b2e6e0 60%, #e9faf5 100%);\n    border-radius: 90px 90px 60px 60px/60px 60px 30px 30px;\n    margin-bottom: -18px;\n    z-index: 2;\n    border: 3px solid #2a87b3;\n}\n\n.gacha-machine-body {\n    width: 320px;\n    height: 320px;\n    background: #e9faf5;\n    border: 6px solid #2a87b3;\n    border-radius: 50%;\n    position: relative;\n    z-index: 1;\n    overflow: hidden;\n}\n\n.gacha-balls {\n    width: 100%;\n    height: 100%;\n    position: relative;\n}\n\n.gacha-ball {\n    width: 60px;\n    height: 60px;\n    background: #fff;\n    border: 2px solid #2a87b3;\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-weight: bold;\n    font-size: 16px;\n    color: #2a87b3;\n    box-shadow: 0 2px 8px rgba(42,135,179,0.08);\n    position: absolute;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    transition: left 0.3s, top 0.3s;\n}\n\n.gacha-ball .ball-role-name {\n    display: block;\n    width: 44px;\n    max-width: 44px;\n    min-height: 28px;\n    font-size: 13px;\n    line-height: 1.2;\n    text-align: center;\n    word-break: break-all;\n    white-space: pre-line;\n    overflow: hidden;\n    margin: 0 auto;\n}\n\n.gacha-ball.ball-t {\n    background: #e3f1ff;\n    border-color: #409EFF;\n    color: #409EFF;\n}\n.gacha-ball.ball-nai {\n    background: #e6fff2;\n    border-color: #52c41a;\n    color: #52c41a;\n}\n.gacha-ball.ball-dps {\n    background: #e9faf5;\n    border-color: #2a87b3;\n    color: #2a87b3;\n}\n\n.gacha-machine-hole {\n    width: 60px;\n    height: 30px;\n    background: #2a87b3;\n    border-radius: 0 0 30px 30px/0 0 20px 20px;\n    position: absolute;\n    left: 50%;\n    bottom: 90px;\n    transform: translateX(-50%);\n    z-index: 3;\n    border: 2px solid #2a87b3;\n    border-top: none;\n}\n\n.gacha-machine-handle {\n    width: 60px;\n    height: 60px;\n    background: #e9faf5;\n    border: 4px solid #2a87b3;\n    border-radius: 50%;\n    position: absolute;\n    left: 50%;\n    bottom: 20px;\n    transform: translateX(-50%);\n    z-index: 4;\n    box-shadow: 0 2px 8px rgba(42, 135, 179, 0.10);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n    transition: box-shadow 0.2s, background 0.2s;\n}\n\n.gacha-machine-handle:hover {\n    background: #b2e6e0;\n    box-shadow: 0 4px 16px #2a87b3;\n}\n\n.gacha-machine-handle.handle-disabled,\n.gacha-machine-handle.handle-disabled:hover {\n    background: #e0e0e0;\n    cursor: not-allowed;\n    box-shadow: none;\n    border-color: #bdbdbd;\n}\n\n.handle-inner {\n    width: 24px;\n    height: 24px;\n    background: #2a87b3;\n    border-radius: 50%;\n    box-shadow: 0 2px 8px #b2e6e0;\n}\n\n.gacha-machine-bottom {\n    width: 180px;\n    height: 60px;\n    background: linear-gradient(180deg, #e9faf5 60%, #b2e6e0 100%);\n    border-radius: 0 0 90px 90px/0 0 60px 60px;\n    margin-top: -18px;\n    z-index: 2;\n    border: 3px solid #2a87b3;\n    border-top: none;\n}\n\n.el-table {\n    font-size: 13px;\n}\n\n.user-select-container,\n.result-table-wrap {\n    max-width: 320px;\n    width: 100%;\n    margin: 0 auto;\n}\n\n.theme-table {\n    width: 100%;\n    max-width: 320px;\n    min-width: 0;\n}\n\n.theme-table ::v-deep .el-table__header th,\n.theme-table ::v-deep .el-table__cell,\n.theme-table ::v-deep .el-table__body td {\n    border: 1px solid #2a87b3 !important;\n    color: #2a87b3 !important;\n    background: #e9faf5 !important;\n}\n\n.theme-table ::v-deep .el-table__header th {\n    background: #e9faf5 !important;\n    color: #2a87b3 !important;\n    font-weight: bold;\n    border: 1px solid #2a87b3 !important;\n}\n\n.theme-table ::v-deep .el-table__body tr {\n    background: #fff !important;\n}\n\n.theme-table ::v-deep .el-table {\n    border: 1px solid #2a87b3 !important;\n    border-radius: 0 !important;\n    width: 100% !important;\n    min-width: 0;\n    max-width: 320px;\n    box-sizing: border-box;\n}\n\n.theme-table ::v-deep .el-table__body-wrapper,\n.theme-table ::v-deep .el-table__header-wrapper {\n    overflow-x: auto !important;\n}\n\n.theme-table ::v-deep .el-table {\n    width: 100% !important;\n    min-width: 240px;\n    max-width: 100%;\n}\n\n@media (max-width: 600px) {\n    .gacha-machine-outer {\n        width: 100%;\n        max-width: 100vw;\n        height: auto;\n        max-height: 60vw;\n    }\n\n    .gacha-machine {\n        width: 100%;\n        max-width: 100vw;\n        height: auto;\n        max-height: 60vw;\n    }\n\n    .gacha-machine-body {\n        width: 90vw;\n        height: 90vw;\n        max-width: 320px;\n        max-height: 320px;\n    }\n}\n\n.user-select-container {\n    border: 2px solid #2a87b3;\n    border-radius: 8px;\n    padding: 10px 8px 4px 8px;\n    margin-bottom: 18px;\n    background: #fff;\n    max-width: 320px;\n}\n\n.user-select-blocks {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 8px;\n}\n\n.user-block {\n    flex: 0 0 calc(20% - 8px);\n    box-sizing: border-box;\n    padding: 2px 0;\n    border-radius: 8px;\n    background: #e9faf5;\n    border: 1px solid #2a87b3;\n    font-weight: 500;\n    font-size: 13px;\n    cursor: pointer;\n    text-align: center;\n    user-select: none;\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    min-width: 0;\n    transition: background 0.2s, color 0.2s, border 0.2s;\n    margin-bottom: 4px;\n}\n\n.user-block.selected {\n    background: #2a87b3;\n    color: #fff;\n}\n\n.user-block.disabled {\n    background: #e0e0e0;\n    color: #bdbdbd;\n    border-color: #bdbdbd;\n    cursor: not-allowed;\n}\n.user-block.selected .user-block-name {\n    color: #fff !important;\n}\n.user-block-name {\n    display: inline-block;\n    max-width: 3em;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    vertical-align: middle;\n}\n\n.gacha-result-table {\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    min-width: 0;\n    flex: 1;\n}\n\n.gacha-section-title {\n    font-size: 15px;\n    font-weight: bold;\n    color: #2a87b3;\n    margin-bottom: 8px;\n    margin-top: 4px;\n    letter-spacing: 1px;\n}\n\n.gacha-section-title::after {\n    content: '';\n    position: absolute;\n    width: 100%;\n    height: 2px;\n    bottom: -4px;\n    left: 0;\n    background: linear-gradient(to right, transparent, #2a87b3, transparent);\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}